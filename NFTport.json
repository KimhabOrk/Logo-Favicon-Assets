{
  "openapi": "3.0.2",
  "info": {
    "title": "NFT API",
    "description": "NFTPort API version 1.0.0",
    "version": "1.0.0",
    "contact": {
      "name": "Johannes Tammekänd, Co-Founder of NFTPort",
      "email": "johannes@nftport.xyz"
    },
    "x-logo": {
      "url": "https://ipfs.io/ipfs/QmZBqrDNuRo3RQ7Jxc1SbecJ6GzhpBPLmwjFrXHj9hwqpU"
    }
  },
  "servers": [
    {
      "url": "https://api.nftport.xyz"
    }
  ],
  "paths": {
    "/v0/nfts": {
      "get": {
        "tags": [
          "Contracts, Metadata & Assets"
        ],
        "summary": "Retrieve all NFTs",
        "description": "Returns all ERC721 and ERC1155 NFTs that have been minted on a given chain. Can be set to ```include``` the NFT ```metadata```, ```file_information```,  ```contract_infomation``` and ```all``` which includes full details like in [Retrieve NFT details](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTM-retrieve-nft-details). Ethereum and Polygon are supported.\n\n#### Useful for:\n* Big data analysis or analytics with all the NFTs.\n* Keeping track of all the created NFTs.\n* Importing all NFTs to your application.\n\n#### Related:\n* To get all NFTs per contract, see [Retrieve contract NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTQ-retrieve-contract-nf-ts).\n* To get detailed information on the returned NFTs, see [Retrieve NFT details](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTM-retrieve-nft-details).",
        "operationId": "nfts_v0_nfts_get",
        "parameters": [
          {
            "description": "Blockchain from which to query NFTs.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "ethereum",
                "polygon"
              ],
              "type": "string",
              "description": "Blockchain from which to query NFTs."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. ```metadata``` includes NFT metadata, ```file_information``` includes extra information of the NFT’s file,  ```contract_infomation``` includes information of the NFT’s contract and ```all``` includes full details like in [Retrieve NFT details](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTM-retrieve-nft-details). Fields can be combined to get desired result.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GetNftsRequestInclude"
              },
              "description": "Include optional data in the response. ```metadata``` includes NFT metadata, ```file_information``` includes extra information of the NFT’s file,  ```contract_infomation``` includes information of the NFT’s contract and ```all``` includes full details like in [Retrieve NFT details](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTM-retrieve-nft-details). Fields can be combined to get desired result.",
              "default": [
                "default"
              ]
            },
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/nfts/{contract_address}/{token_id}": {
      "get": {
        "tags": [
          "Contracts, Metadata & Assets"
        ],
        "summary": "Retrieve NFT details",
        "description": "Returns details for a given NFT. These include ```metadata_url```, ```metadata``` such as name, description, attributes, etc., ```image_url```, ```cached_image_url``` and ```mint_date```. Ethereum and Polygon are supported.\n\n#### Useful for:\n* For easily getting all the necessary information about a given NFT.\n\n#### Related:\n* To get all NFTs per contract, see [Retrieve contract NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTQ-retrieve-contract-nf-ts).\n* To get NFTs that a given account owns, see [Retrieve NFTs owned by an account](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzM-retrieve-nf-ts-owned-by-an-account).",
        "operationId": "nft_details_v0_nfts__contract_address___token_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string"
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Token Id",
              "type": "string"
            },
            "name": "token_id",
            "in": "path"
          },
          {
            "description": "Blockchain where the NFT has been minted.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "ethereum",
                "polygon"
              ],
              "type": "string",
              "description": "Blockchain where the NFT has been minted."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Queues and refreshes the metadata of the token if it has changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
            "required": false,
            "schema": {
              "title": "Refresh Metadata",
              "type": "boolean",
              "description": "Queues and refreshes the metadata of the token if it has changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
              "default": false
            },
            "name": "refresh_metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nft``` property that contains details for a single NFT.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__nfts__entities__NftDetailsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/nfts/{contract_address}": {
      "get": {
        "tags": [
          "Contracts, Metadata & Assets"
        ],
        "summary": "Retrieve contract NFTs",
        "description": "Returns all NFTs for a given contract address. Can be set to ```include``` the NFT ```metadata``` or ```all``` which returns extra information. Ethereum and Polygon are supported.\n\n#### Useful for:\n* Importing all NFTs from a given contract to your application.\n\n#### Related:\n* To get detailed information on the returned NFTs, see [Retrieve NFT details](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTM-retrieve-nft-details).\n* To get NFTs that a given account owns, see [Retrieve NFTs owned by an account](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzM-retrieve-nf-ts-owned-by-an-account).",
        "operationId": "nfts_by_contract_v0_nfts__contract_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string"
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query NFTs.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "ethereum",
                "polygon"
              ],
              "type": "string",
              "description": "Blockchain from which to query NFTs."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. default is the default response, metadata includes NFT metadata and cached_file_url, and all includes extra information like file_information and mint_date in [Retrieve NFT details](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTM-retrieve-nft-details).",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetContractNftsRequestInclude"
                }
              ],
              "description": "Include optional data in the response. default is the default response, metadata includes NFT metadata and cached_file_url, and all includes extra information like file_information and mint_date in [Retrieve NFT details](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTM-retrieve-nft-details).",
              "default": "default"
            },
            "name": "include",
            "in": "query"
          },
          {
            "description": "Queues and refreshes all the NFTs metadata inside the contract (i.e. all tokens) if they have changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
            "required": false,
            "schema": {
              "title": "Refresh Metadata",
              "type": "boolean",
              "description": "Queues and refreshes all the NFTs metadata inside the contract (i.e. all tokens) if they have changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
              "default": false
            },
            "name": "refresh_metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/accounts/{account_address}": {
      "get": {
        "tags": [
          "Ownership"
        ],
        "summary": "Retrieve NFTs owned by an account",
        "description": "Returns NFTs owned by a given account (i.e. wallet) address. Can also return each NFT metadata with  ```include```  parameter. Ethereum, Tezos and Polygon are supported.\n\n**For Ethereum use the continuation string from response for pagination, for Polygon and Tezos use page number.**\n\n#### Useful for:\n* For checking if a user owns a specific NFT and then unlocking specific activity.\n* Adding NFT portfolio section to your apps.\n\n#### Related:\n* To get all NFTs per contract, see [Retrieve contract NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTQ-retrieve-contract-nf-ts).\n* To get extra detailed information on the returned NFTs, see [Retrieve NFT details](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTM-retrieve-nft-details).",
        "operationId": "account_nfts_v0_accounts__account_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string"
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query NFTs.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "ethereum",
                "polygon",
                "tezos"
              ],
              "type": "string",
              "description": "Blockchain from which to query NFTs."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. ```default``` is the default response and metadata includes NFT metadata, like in Retrieve NFT details.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountRequestInclude"
                }
              ],
              "description": "Include optional data in the response. ```default``` is the default response and metadata includes NFT metadata, like in Retrieve NFT details.",
              "default": "default"
            },
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__account__entities__AccountNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/accounts/creators/{account_address}": {
      "get": {
        "tags": [
          "Ownership"
        ],
        "summary": "Retrieve NFTs created by an account",
        "description": "Returns NFTs created (i.e. minted) by a given account (i.e. wallet) address. Can also return each NFT metadata with `include` parameter. Ethereum mainnet is supported.\n\n#### Useful for:\n* For displaying NFTs created by an account.\n* Doing analytics on creator's portfolio.\n\n#### Related:\n* To get NFTs that a given account owns, see [Retrieve NFTs owned by an account](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzM-retrieve-nf-ts-owned-by-an-account).\n* To get all NFTs per contract, see [Retrieve contract NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTQ-retrieve-contract-nf-ts).\n* To get extra detailed information on the returned NFTs, see [Retrieve NFT details](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTM-retrieve-nft-details).",
        "operationId": "creator_nfts_v0_accounts_creators__account_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string"
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query NFTs.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "ethereum"
              ],
              "type": "string",
              "description": "Blockchain from which to query NFTs."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. ```default``` is the default response and metadata includes NFT metadata, like in Retrieve NFT details.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountRequestInclude"
                }
              ],
              "description": "Include optional data in the response. ```default``` is the default response and metadata includes NFT metadata, like in Retrieve NFT details.",
              "default": "default"
            },
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatorNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/transactions/accounts/{account_address}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve transactions by an account",
        "description": "Returns all on-chain transactions as well as OpenSea and Rarible order book data for the specified account (i.e. wallet) address. Can be set to `include` transactions such as `mint`, `burn`, `transfer_from`, `transfer_to`, `list`, `buy`, `sell`  and OpenSea order book data such as `make_bid` and `get_bid`, or `all` which includes all transactions. Ethereum mainnet is supported.\n\n#### Useful for:\n* Tracking all transactions made by an account.\n* Building analytics and monitoring solutions.\n\n#### Related:\n* To query transactions from a contract, see [Retrieve transactions by contract](https://docs.nftport.xyz/docs/nftport/b3A6MzAxNDQ3NzY-retrieve-transactions-by-contract).\n* To query transactions for an NFT, see [Retrieve transactions by NFT](https://docs.nftport.xyz/docs/nftport/b3A6MzAxNDQ3NzU-retrieve-transactions-by-nft).",
        "operationId": "transactions_by_account_v0_transactions_accounts__account_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string"
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query NFT transactions.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "ethereum"
              ],
              "type": "string",
              "description": "Blockchain from which to query NFT transactions."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types.",
            "required": true,
            "schema": {
              "title": "Type",
              "type": "array",
              "items": {
                "enum": [
                  "transfer_from",
                  "transfer_to",
                  "mint",
                  "burn",
                  "make_bid",
                  "get_bid",
                  "list",
                  "buy",
                  "sell",
                  "all"
                ],
                "type": "string"
              },
              "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with `transactions` property that contains an array of up to `page_size` transactions. Each entry in the array is a separate transaction. If no more transactions are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsByAccountResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/transactions/nfts/{contract_address}/{token_id}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve transactions by NFT",
        "description": "Returns all on-chain transactions as well as OpenSea and Rarible order book data for the specified NFT token. Can be set to `include` transactions such as `transfer`, `burn`, `mint`, `bid`, `list` and `sale`, or `all` which includes all transactions. Ethereum mainnet is supported.\n\n#### Useful for:\n* Tracking all transactions of an NFT token.\n* Building analytics and monitoring solutions.\n\n#### Related:\n* To query transactions from a contract, see [Retrieve transactions by contract](https://docs.nftport.xyz/docs/nftport/b3A6MzAxNDQ3NzY-retrieve-transactions-by-contract).\n* To query transactions from an account, see [Retrieve transactions by account](https://docs.nftport.xyz/docs/nftport/b3A6MzAxNDQ3NzQ-retrieve-transactions-by-an-account).",
        "operationId": "transactions_by_token_v0_transactions_nfts__contract_address___token_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string"
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Token Id",
              "type": "string"
            },
            "name": "token_id",
            "in": "path"
          },
          {
            "description": "Blockchain of the NFT from which to query transactions.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "ethereum"
              ],
              "type": "string",
              "description": "Blockchain of the NFT from which to query transactions."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types.",
            "required": true,
            "schema": {
              "title": "Type",
              "type": "array",
              "items": {
                "enum": [
                  "transfer",
                  "mint",
                  "burn",
                  "bid",
                  "list",
                  "sale",
                  "all"
                ],
                "type": "string"
              },
              "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with `transactions` property that contains an array of up to `page_size` transactions. Each entry in the array is a separate transaction. If no more transactions are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsByTokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/transactions/nfts/{contract_address}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve transactions by contract",
        "description": "Returns all on-chain transactions as well as OpenSea and Rarible order book data for the specified contract. Can be set to `include` transactions such as `transfer`, `burn`, `mint`, `bid`, `list` and `sale`, or `all` which includes all transactions. Ethereum mainnet is supported.\n\n#### Useful for:\n* Tracking all transactions of all NFT tokens in a contract.\n* Building analytics and monitoring solutions.\n\n#### Related:\n* To query sales statistics of an NFT collection, see [Retrieve contract sales statistics](https://docs.nftport.xyz/docs/nftport/b3A6MzEyODQ1MTc-retrieve-contract-sales-statistics).\n* To query transactions for an NFT, see [Retrieve transactions by NFT](https://docs.nftport.xyz/docs/nftport/b3A6MzAxNDQ3NzU-retrieve-transactions-by-nft).\n* To query transactions from an account, see [Retrieve transactions by account](https://docs.nftport.xyz/docs/nftport/b3A6MzAxNDQ3NzQ-retrieve-transactions-by-an-account).",
        "operationId": "transactions_by_contract_v0_transactions_nfts__contract_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string"
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query NFT transactions.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "ethereum"
              ],
              "type": "string",
              "description": "Blockchain from which to query NFT transactions."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types.",
            "required": true,
            "schema": {
              "title": "Type",
              "type": "array",
              "items": {
                "enum": [
                  "transfer",
                  "mint",
                  "burn",
                  "bid",
                  "list",
                  "sale",
                  "all"
                ],
                "type": "string"
              },
              "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with `transactions` property that contains an array of up to `page_size` transactions. Each entry in the array is a separate transaction. If no more transactions are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsByContractResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/transactions/stats/{contract_address}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve contract sales statistics",
        "description": "Retrieve in-depth sales statistics about a contract from OpenSea. Includes statistics such as floor price, total volume, sales, etc. Updated with 1-hour interval.\n\n#### Useful for:\n* Analysis and ranking of NFT collections.\n* Tracking NFT collections by sales, etc.\n\n#### Related:\n* To query transactions from a contract, see [Retrieve transactions by contract](https://docs.nftport.xyz/docs/nftport/b3A6MzAxNDQ3NzY-retrieve-transactions-by-contract).\n* To get all NFTs of a contract, see [Retrieve contract NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTQ-retrieve-contract-nf-ts).",
        "operationId": "collection_stats_v0_transactions_stats__contract_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string"
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "description": "Blockchain where the collection has been minted.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "ethereum"
              ],
              "type": "string",
              "description": "Blockchain where the collection has been minted."
            },
            "name": "chain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "In depth statistics of a contract",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionStatsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/contracts": {
      "put": {
        "tags": [
          "Contracts"
        ],
        "summary": "Update a deployed contract",
        "description": "Updates a contract which has been previously deployed with [Deploy an NFT contract](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzU-deploy-an-nft-contract). You can freeze the metadata of the NFTs minted in the specified contract which means they can not be updated after minting (token URIs are frozen on the contract level).\n\n#### Useful for:\n* Creating dynamic NFTs (NFTs that change after minting based on events) and freezing them afterwards.\n* Revealing NFTs after a drop and freezing them afterwards.\n\n#### Related:\n* If you wish to list all your previously deployed contracts, see [List all your deployed contracts](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODE-list-all-your-deployed-contracts).",
        "operationId": "update_contract_v0_contracts_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContractRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns transaction hash which can be used to confirm that the transaction was successful (blockchain transactions can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateContractResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Deploy an NFT contract",
        "description": "Deploys an [```ERC-721```](https://github.com/nftport/solidity-contracts/blob/master/contracts/ERC721NftCustom.sol)\nor [```ERC-1155```](https://github.com/nftport/solidity-contracts/blob/master/contracts/ERC1155NftCustom.sol) smart contract\n where your can mint your NFTs. This is a required step if you wish to use [Customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting) as the contract will represent your own collection.\n\nAs blockchains take time to sync, then after contract deployment, you can use the returned ```transaction_hash``` in [Retrieve a deployed contract](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM4OTk-retrieve-a-deployed-contract) to get the ```contract_address```.\n\n**You can deploy up to 5 contracts for free per chain. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Deploying your own contracts so you can build custom products or collections easily.\n\n#### Related:\n* To get the deployed contract address, use [Retrieve a deployed contract](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM4OTk-retrieve-a-deployed-contract).\n* If you want to know how to use the customizable minting, see [Customizable Minting Quickstart](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#customizable-minting).",
        "operationId": "deploy_contract_v0_contracts_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployContractRequestWithAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of the deployed contract and its transaction hash.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__contract__entities__DeployContractResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/contracts/{transaction_hash}": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieve a deployed contract",
        "description": "Returns the details of a contract that has previously been deployed with [Deploy an NFT contract](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzU-deploy-an-nft-contract). Supply the ```transaction_hash``` to check if the contract is on chain and to get the ```contract_address```. You can use the returned ```contract_address``` in [Customizable Minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting).\n\nAs blockchains take time to sync, this endpoint can be polled until the ```contract_address``` is returned.\n\n#### Useful for:\n* Deploying your own contracts so you can build custom products or collections easily.\n\n#### Related:\n* If you want to get data about NFT contracts which you haven't deployed using NFTPort, see [Retrieve contract NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjAzNDUzNTQ-retrieve-contract-nf-ts).\n* If you want to learn how to use the [customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting), see [Customizable Minting Quickstart](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#customizable-minting).",
        "operationId": "get_deployed_contract_v0_contracts__transaction_hash__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Transaction Hash",
              "type": "string"
            },
            "name": "transaction_hash",
            "in": "path"
          },
          {
            "description": "Blockchain where the contract has been deployed to.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "polygon",
                "rinkeby"
              ],
              "type": "string",
              "description": "Blockchain where the contract has been deployed to."
            },
            "name": "chain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Chain and contract address of the deployed contract.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeployedContractResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/files": {
      "post": {
        "tags": [
          "Storage"
        ],
        "summary": "Upload a file to IPFS",
        "description": "Uploads a file to [IPFS](https://docs.ipfs.io/concepts/what-is-ipfs/) which makes your NFT storage easy. You can use the returned  ```ipfs_url```  with [Upload metadata to IPFS](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzc-upload-metadata-to-ipfs) to mint your NFT.\n\nIf you prefer hosting files in your own servers, you can skip this step. Otherwise, we recommend using IPFS because it's an industry standard for decentralized storage and guarantees the immutability of your files.\nWe use [nft.storage](https://nft.storage/) to [pin](https://docs.ipfs.io/how-to/pin-files/) the files with Filecoin, which ensures that your important data is retained in IPFS.\n\n**Supports all file types and maximum file size is 20MB. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Storing your NFT files easily and according to the industry standards.\n\n#### Related:\n* After uploading files, use [Upload metadata to IPFS](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzc-upload-metadata-to-ipfs) to continue with your NFT minting.\n* If you want to learn how to use the [customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting), see [Customizable Minting Quickstart](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#customizable-minting).\n\n#### Example Requests in cURL, Python & JS\n\n<!--\ntitle: \"Make sure to replace the parameters with your own values\"\nlineNumbers: true\n-->\n\n```shell\ncurl --request POST \\\n    --url 'https://api.nftport.xyz/v0/files' \\\n    --header 'Authorization: API Key Here' \\\n    --header 'Content-Type: multipart/form-data' \\\n    --form 'file=@/path/to/file_to_upload.png;type=image/png'\n```\n\n```python\nimport requests\n\nfile = open(\"image.png\", \"rb\")\n\nresponse = requests.post(\n    \"https://api.nftport.xyz/v0/files\",\n    headers={\"Authorization\": 'API-Key-Here'},\n    files={\"file\": file}\n)\n```\n\n```javascript\nconst fs = require('fs');\nconst fetch = require('node-fetch');\nconst FormData = require('form-data');\n\nconst form = new FormData();\nconst fileStream = fs.createReadStream('image.jpg');\nform.append('file', fileStream);\n\nconst options = {\n  method: 'POST',\n  body: form,\n  headers: {\n    \"Authorization\": \"API-Key-Here\",\n  },\n};\n\nfetch(\"https://api.nftport.xyz/v0/files\", options)\n  .then(response => {\n    return response.json()\n  })\n  .then(responseJson => {\n    // Handle the response\n    console.log(responseJson);\n  })\n```",
        "operationId": "ipfs_upload_file_v0_files_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_ipfs_upload_file_v0_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The details of the uploaded file and the IPFS URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpfsFileUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/metadata": {
      "post": {
        "tags": [
          "Storage"
        ],
        "summary": "Upload metadata to IPFS",
        "description": "Uploads NFT metadata to [IPFS](https://docs.ipfs.io/concepts/what-is-ipfs/) as a JSON file which is the standard format for  [NFT metadata](https://nftschool.dev/reference/metadata-schemas/#intro-to-json-schemas). You can use the returned ```metadata_ipfs_uri``` in [Customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting) to mint your NFT.\n\nIf you prefer hosting metadata in your own servers, you can skip this step. Otherwise, we recommend using IPFS because it’s an industry standard for decentralized storage and guarantees the immutability of your metadata. For the ```file_url```, we also recommend using IPFS with [Upload a file to IPFS](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzY-upload-a-file-to-ipfs).\nWe use [nft.storage](https://nft.storage/) to [pin](https://docs.ipfs.io/how-to/pin-files/) the files with Filecoin, which ensures that your important data is retained in IPFS.\n\n#### Useful for:\n* Storing your NFT metadata easily and according to the industry standards.\n\n#### Related:\n* After uploading your metadata, use [Customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting) to continue with your NFT minting.\n* If you want to learn how to use the customizable minting, see [Customizable Minting Quickstart](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#customizable-minting).\n* If you are new to NFT metadata, see the [basics on it](https://nftschool.dev/reference/metadata-schemas/).",
        "operationId": "ipfs_upload_metadata_v0_metadata_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__service__minting__entities__IpfsMetadataUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The details of the NFT metadata and the uploaded metadata URI which you can use in [Customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__minting__entities__IpfsMetadataUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/customizable": {
      "put": {
        "tags": [
          "Minting"
        ],
        "summary": "Update a minted NFT",
        "description": "Updates an NFT which has been previously minted with [Customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting)\nor [Batch customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MzIxMzAwOTk-batch-customizable-minting-erc-1155). You can update the metadata URI with a new link or freeze the metadata URI to permanently lock it. The NFT must be minted in your deployed contract and update only works if contract and token are not frozen.\n\n1.  First, you need ```contract_address``` from [Deploy an NFT contract](https://nftport.stoplight.io/docs/nftport/b3A6MjE0MDYzNzU-deploy-an-nft-contract) and ```metadata_updatable``` must be set ```true```.\n2.  Secondly, you need ```token_id``` from [Customizable minting](https://nftport.stoplight.io/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting) or [Batch customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MzIxMzAwOTk-batch-customizable-minting-erc-1155).\n3.  If you only wish to update the metadata URI set a new ```metadata_uri```. If you wish to update metadata URI and freeze both at the same time then set a new ```metadata_uri``` and ```freeze_metadata``` as ```true```. If you only want to freeze existing metadata URI, then set ```freeze_metadata``` as ```true```.\n\n#### Useful for:\n* Creating dynamic NFTs (NFTs that change after minting based on events).\n* Revealing NFTs after the drop.\n\n#### Related:\n* If you want to learn how to use [customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting), see [Customizable Minting Quickstart](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#customizable-minting).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODI-list-all-your-minted-nf-ts).",
        "operationId": "update_nft_v0_mints_customizable_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns transaction hash which can be used to confirm that the transaction was successful (blockchain transactions can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Minting"
        ],
        "summary": "Customizable minting",
        "description": "Mints an NFT to your previously deployed contract (i.e. collection). This minting consists of multiple steps and enables you to customize the whole minting flow for your exact needs.\n\n1.  First, you need  ```contract_address```  using [Deploy an NFT contract](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzU-deploy-an-nft-contract).\n2.  Secondly, you need  ```metadata_uri```  using [Upload metadata to IPFS](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzc-upload-metadata-to-ipfs).\n\nAfter minting, the NFT will appear in the  ```mint_to_address```  wallet. If you minted to your own wallet, you can also see the minted NFT on OpenSea in your profile after a few minutes.\n\n**You can mint up to 100 NFTs for free per chain. Maximum supported filesize is 20MB. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Minting to your own contracts (i.e. collections) effortlessly.\n* Creating customizable minting flows which enable to build NFT-based products.\n\n#### Related:\n* If you want to learn how to use [customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting), see [Customizable Minting Quickstart](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#customizable-minting).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODI-list-all-your-minted-nf-ts).",
        "operationId": "mint_nft_v0_mints_customizable_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MintNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns contract address and the transaction hash which can be used in [Return minted NFT](https://docs.nftport.xyz/docs/nftport/b3A6MTc0MDA0NTM-returns-minted-nft) to receive the token ID and confirm that the minting was successful (minting can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/customizable/batch": {
      "post": {
        "tags": [
          "Minting"
        ],
        "summary": "Batch customizable minting (ERC1155)",
        "description": "Batch mints NFTs to your previously deployed ERC1155 contract (i.e. collection). This minting consists of multiple steps and enables you to customize the whole minting flow for your exact needs.\nBatch minting allows you to create multiple NFTs with one API call and create more than one of the same token.\n\n1.  First, you need  ```contract_address```  using [Deploy an NFT contract](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzU-deploy-an-nft-contract).\n2.  Secondly, you need  ```metadata_uri```  using [Upload metadata to IPFS](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzc-upload-metadata-to-ipfs).\n\nAfter minting, the NFTs will appear in the  ```mint_to_address```  wallet.\nIf you minted to your own wallet, you can also see the minted NFTs on OpenSea in your profile after a few minutes.\n\n**You can mint up to 100 NFTs for free per chain. Maximum supported filesize is 20MB. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Minting to your own contracts (i.e. collections) effortlessly.\n* Creating customizable minting flows which enable to build NFT-based products.\n\n#### Related:\n* If you want to learn how to use [customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting), see [Customizable Minting Quickstart](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#customizable-minting).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODI-list-all-your-minted-nf-ts).",
        "operationId": "mint_batch_nft_v0_mints_customizable_batch_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MintBatchNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns contract address and the transaction hash which can be used in [Return minted NFT](https://docs.nftport.xyz/docs/nftport/b3A6MTc0MDA0NTM-returns-minted-nft) to receive the token ID and confirm that the minting was successful (minting can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintBatchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/easy/urls": {
      "post": {
        "tags": [
          "Minting"
        ],
        "summary": "Easy minting w/URL",
        "description": "With Easy mint, you can turn anything into an NFT in less than 5 minutes using one simple API call. If you are new to minting, see  [Easy minting quickstart](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#easy-minting).\n\nAfter minting, the NFT will appear in the  ```mint_to_address```  wallet. If you minted to your own wallet, you can also see the minted NFT on OpenSea in your profile after a few minutes.\n\n**You can mint up to 100 NFTs for free per chain. Maximum supported file size is 20MB. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* For turning anything into an NFT effortlessly. For all the benefits, see  [Your New Minting Superpowers](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#what-you-can-do-with-your-new-minting-superpowers).\n\n#### Related:\n* If you wish to customize the minting process e.g. use your own contract, see  [Customizable minting](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#advanced-minting-apis).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODI-list-all-your-minted-nf-ts).",
        "operationId": "easy_mint_nft_v0_mints_easy_urls_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EasyMintNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns contract address and the transaction hash which can be used in [Return minted NFT](https://docs.nftport.xyz/docs/nftport/b3A6MTc0MDA0NTM-returns-minted-nft) to receive the token ID and confirm that the minting was successful (minting can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintNftWithUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/easy/files": {
      "post": {
        "tags": [
          "Minting"
        ],
        "summary": "Easy minting w/file upload",
        "description": "With Easy mint, you can turn anything into an NFT in less than 5 minutes using one simple API call. If you are new to minting, see  [Easy minting quickstart](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#easy-minting).\n\nAfter minting, the NFT will appear in the  ```mint_to_address```  wallet. If you minted to your own wallet, you can also see the minted NFT on OpenSea in your profile after a few minutes.\n\n**You can mint up to 100 NFTs for free per chain. Maximum supported file size is 20MB. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* For turning anything into an NFT effortlessly. For all the benefits, see  [Your New Minting Superpowers](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#what-you-can-do-with-your-new-minting-superpowers).\n\n#### Related:\n* If you wish to customize the minting process e.g. use your own contract, see  [Customizable minting](https://docs.nftport.xyz/docs/nftport/ZG9jOjE3NDI3MDc3-minting-quickstart#advanced-minting-apis).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODI-list-all-your-minted-nf-ts).\n\n#### Example Requests in cURL, Python & JS\n\n<!--\ntitle: \"Make sure to replace the parameters with your own values\"\nlineNumbers: true\n-->\n\n```shell\ncurl --request POST \\\n    --url 'https://api.nftport.xyz/v0/mints/easy/files?chain=polygon&name=NFT_Name&description=NFT_Description&mint_to_address=0x...' \\\n    --header 'Authorization: API Key Here' \\\n    --header 'Content-Type: multipart/form-data' \\\n    --form 'file=@/path/to/file_to_upload.png;type=image/png'\n```\n\n```python\nimport requests\n\nfile = open(\"image.png\", \"rb\")\n\nquery_params = {\n    \"chain\": \"polygon\",\n    \"name\": \"NFT_Name\",\n    \"description\": \"NFT_Description\",\n    \"mint_to_address\": Wallet_Address\n}\n\nresponse = requests.post(\n    \"https://api.nftport.xyz/v0/mints/easy/files\",\n    headers={\"Authorization\": \"API-Key-Here\"},\n    params=query_params,\n    files={\"file\": file}\n)\n```\n\n```javascript\nconst fs = require('fs');\nconst fetch = require('node-fetch');\nconst FormData = require('form-data');\n\nconst form = new FormData();\nconst fileStream = fs.createReadStream('/path/to/file_to_upload.png');\nform.append('file', fileStream);\n\nconst options = {\n  method: 'POST',\n  body: form,\n  headers: {\n    \"Authorization\": \"API-Key-Here\",\n  },\n};\n\nfetch(\"https://api.nftport.xyz/v0/mints/easy/files?\" + new URLSearchParams({\n  chain: 'polygon',\n  name: \"NFT_Name\",\n  description: \"NFT_Description\",\n  mint_to_address: \"Wallet_Address\",\n}), options)\n  .then(function(response) { return response.json() })\n  .then(function(responseJson) {\n    // Handle the response\n    console.log(responseJson);\n  })\n```",
        "operationId": "easy_mint_nft_with_upload_v0_mints_easy_files_post",
        "parameters": [
          {
            "description": "Blockchain to mint the NFT on.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "polygon",
                "rinkeby"
              ],
              "type": "string",
              "description": "Blockchain to mint the NFT on."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Name of the NFT.",
            "required": true,
            "schema": {
              "title": "Name",
              "maxLength": 400,
              "minLength": 1,
              "type": "string",
              "description": "Name of the NFT."
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Text description of the NFT which will be seen on NFT marketplaces, etc.",
            "required": true,
            "schema": {
              "title": "Description",
              "maxLength": 2000,
              "minLength": 1,
              "type": "string",
              "description": "Text description of the NFT which will be seen on NFT marketplaces, etc."
            },
            "name": "description",
            "in": "query"
          },
          {
            "description": "Account address where the NFT will be sent. For example, your Metamask wallet address if you wish to send it to yourself.",
            "required": true,
            "schema": {
              "title": "Mint To Address",
              "type": "string",
              "description": "Account address where the NFT will be sent. For example, your Metamask wallet address if you wish to send it to yourself."
            },
            "name": "mint_to_address",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_easy_mint_nft_with_upload_v0_mints_easy_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns contract address and the transaction hash which can be used in [Return minted NFT](https://docs.nftport.xyz/docs/nftport/b3A6MTc0MDA0NTM-returns-minted-nft) to receive the token ID and confirm that the minting was successful (minting can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintNftWithUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/{transaction_hash}": {
      "get": {
        "tags": [
          "Minting"
        ],
        "summary": "Retrieve a minted NFT",
        "description": "Returns the details of a minted NFT. You need to provide  ```transaction_hash```  which is returned from [Easy minting w/URL](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDM-easy-minting-w-url), [Easy minting w/file upload](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDQ-easy-minting-w-file-upload) or [Customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting). Minting is not instantaneous because blockchains take time to verify transactions. Thus, you can poll this endpoint every 5 seconds until you get a response.\n\n#### Useful for:\n* Confirming that NFT minting was successful and the NFT is on chain.\n\n#### Related:\n* For easy minting, see [Easy minting w/URL](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDM-easy-minting-w-url) or [Easy minting w/file upload](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDQ-easy-minting-w-file-upload).\n* For customizable minting, see [Customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODI-list-all-your-minted-nf-ts).",
        "operationId": "get_minted_nft_v0_mints__transaction_hash__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Transaction Hash",
              "type": "string"
            },
            "name": "transaction_hash",
            "in": "path"
          },
          {
            "description": "Blockchain the NFT was minted on.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "polygon",
                "rinkeby"
              ],
              "type": "string",
              "description": "Blockchain the NFT was minted on."
            },
            "name": "chain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a successfully minted NFT which is on chain.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMintedNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/batch/{transaction_hash}": {
      "get": {
        "tags": [
          "Minting"
        ],
        "summary": "Retrieve batch minted NFTs",
        "description": "Returns the details of a batch minted NFTs for ERC1155 contracts.\nYou need to provide  ```transaction_hash```  which is returned from [Batch customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MzIxMzAwOTk-batch-customizable-minting-erc-1155).\nMinting is not instantaneous because blockchains take time to verify transactions.\nThus, you can poll this endpoint every 5 seconds until you get a response.\n\n#### Useful for:\n* Confirming that NFT minting was successful and the NFTs are on chain.\n\n#### Related:\n* For batch customizable minting, see [Batch customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MzIxMzAwOTk-batch-customizable-minting-erc-1155).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODI-list-all-your-minted-nf-ts).",
        "operationId": "get_batch_minted_nft_v0_mints_batch__transaction_hash__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Transaction Hash",
              "type": "string"
            },
            "name": "transaction_hash",
            "in": "path"
          },
          {
            "description": "Blockchain the NFT was minted on.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": [
                "polygon",
                "rinkeby"
              ],
              "type": "string",
              "description": "Blockchain the NFT was minted on."
            },
            "name": "chain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a successfully minted NFT which is on chain.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBatchMintedNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/me/contracts": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List all your deployed contracts",
        "description": "Returns a list of all the contracts you’ve previously deployed with [Deploy an NFT contract](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzU-deploy-an-nft-contract).\n\n#### Useful for:\n* Retrieving your contract creation history.\n\n#### Related:\n* To see all the NFTs you've previously minted, see [List all your minted NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODI-list-all-your-minted-nf-ts).",
        "operationId": "get_user_contracts_v0_me_contracts_get",
        "responses": {
          "200": {
            "description": "List of all the contracts deployed by you.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserProfileContractsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/me/mints": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List all your minted NFTs",
        "description": "Returns a list of all the NFTs you’ve previously minted with [Easy minting w/URL](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDM-easy-minting-w-url), [Easy minting w/file upload](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDQ-easy-minting-w-file-upload) or [Customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting).\n\n#### Useful for:\n* Retrieving your NFT minting history.\n\n#### Related:\n* To see all the contracts you've previously deployed, see [List all your deployed contracts](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODE-list-all-your-deployed-contracts).",
        "operationId": "get_user_minted_nfts_v0_me_mints_get",
        "parameters": [
          {
            "description": "Blockchain where the NFTs have been minted.",
            "required": false,
            "schema": {
              "title": "Chain",
              "enum": [
                "polygon",
                "rinkeby"
              ],
              "type": "string",
              "description": "Blockchain where the NFTs have been minted."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all the NFTs minted by you.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__minting__entities__GetUserProfileMintedNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/me/settings": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "User settings",
        "description": "Retrieve your NFTPort settings to check your usage and limits.\n#### Useful for:\n* Checking your minting and contract deployment usage and limits.\n* Checking your NFT Data rate limits\n\n#### Related:\n* To see your minted NFTs, see [List all your minted NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODI-list-all-your-minted-nf-ts).\n* To see your deployed contracts, see [List all your deployed contracts](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODE-list-all-your-deployed-contracts).",
        "operationId": "get_user_settings_v0_me_settings_get",
        "responses": {
          "200": {
            "description": "Your API usage and limits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserProfileSettingsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Multi-chain NFT search",
        "description": "Searches NFTs across multiple chains using a text query, specifically the ```name``` and ```description``` fields from the metadata. You can think of it like performing a search on Google. It's designed to help you find the one or the most closest NFT results you're looking for.\n\nEthereum and Polygon are supported, including multi-chain search.\n\n#### Useful for:\n* Finding NFTs by their name and/or description.\n* Quickly integrating NFT search to your application.\n\n#### Related:\n* To get NFT recommendations, use [Recommend similar NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM4MzI-find-similar-nf-ts-w-url).\n* To find duplicate NFTs, use [Find duplicate NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODY-find-counterfeit-nf-ts-w-file-upload).",
        "operationId": "text_search_v0_search_get",
        "parameters": [
          {
            "description": "Search query.",
            "required": true,
            "schema": {
              "title": "Text",
              "type": "string",
              "description": "Search query."
            },
            "name": "text",
            "in": "query"
          },
          {
            "description": "Blockchain from which to query NFTs.",
            "required": false,
            "schema": {
              "title": "Chain",
              "enum": [
                "polygon",
                "ethereum",
                "all"
              ],
              "type": "string",
              "description": "Blockchain from which to query NFTs.",
              "default": "all"
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Results ordering criteria. Deafult ordering criteria is search relevance.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TextSearchRequestOrder"
                }
              ],
              "description": "Results ordering criteria. Deafult ordering criteria is search relevance.",
              "default": "relevance"
            },
            "name": "order_by",
            "in": "query"
          },
          {
            "description": "Results will be sorted in this order (ascending/descending).",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TextSearchRequestSortOrder"
                }
              ],
              "description": "Results will be sorted in this order (ascending/descending).",
              "default": "desc"
            },
            "name": "sort_order",
            "in": "query"
          },
          {
            "description": "Results will only include NFTs from this contract address.",
            "required": false,
            "schema": {
              "title": "Filter By Contract Address",
              "type": "string",
              "description": "Results will only include NFTs from this contract address."
            },
            "name": "filter_by_contract_address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__text_search__entities__TextSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/recommendations/similar_nfts/urls": {
      "post": {
        "tags": [
          "Recommendations AI"
        ],
        "summary": "Find similar NFTs w/URL",
        "description": "Returns visually and contextually similar images to the input image passed with ```url```. Uses state of the art computer vision AI to match the input image against all ETH & Polygon NFT images in our database. You can think of it like Google reverse image search.\n\nYou can see this functionality live with [Fingible](https://fingible.nftport.xyz/).\n\n**Maximum supported file size is 20MB.**\n\n#### Useful for:\n* Providing recommendations to your users e.g. like Amazon, Netflix so you can increase revenue.\n* Building new AI-based products and experiences for your users such as [Google for NFTs](https://fingible.nftport.xyz/).\n\n#### Related:\n* For searching for NFTs with keywords, see [Multi-chain NFT search](https://docs.nftport.xyz/docs/nftport/b3A6MjA0MjY5MjE-multi-chain-nft-search).\n* For finding duplicates/copies of NFTs, see [Find duplicate NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODY-find-counterfeit-nf-ts-w-file-upload).",
        "operationId": "search_url_v0_recommendations_similar_nfts_urls_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__service__search__search_url_request__SearchUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__search__entities__SearchResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/recommendations/similar_nfts/files": {
      "post": {
        "tags": [
          "Recommendations AI"
        ],
        "summary": "Find similar NFTs w/file upload",
        "description": "Returns visually and contextually similar images to the uploaded image with  ```file```. Uses state of the art computer vision AI to match the input image against all ETH & Polygon NFT images in our database. You can think of it like Google reverse image search.\n\nYou can see this functionality live with  [Fingible](https://fingible.nftport.xyz/).\n\n**Maximum supported file size is 20MB.**\n\n#### Useful for:\n* Providing recommendations to your users e.g. like Amazon, Netflix so you can increase revenue.\n* Building new AI-based products and experiences for your users such as  [Google for NFTs](https://fingible.nftport.xyz/).\n\n#### Related:\n* For searching for NFTs with keywords, see [Multi-chain NFT search](https://docs.nftport.xyz/docs/nftport/b3A6MjA0MjY5MjE-multi-chain-nft-search).\n* For finding duplicates/copies of NFTs, see [Find duplicate NFTs](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzODY-find-counterfeit-nf-ts-w-file-upload).",
        "operationId": "search_file_v0_recommendations_similar_nfts_files_post",
        "parameters": [
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_search_file_v0_recommendations_similar_nfts_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__search__entities__SearchResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/duplicates/files": {
      "post": {
        "tags": [
          "Duplicate Detection AI"
        ],
        "summary": "Find counterfeit NFTs w/file upload",
        "description": "Analyzes the input image passed with ```file``` and returns duplicates (i.e. counterfeits) against it. Uses state of the art computer vision AI to match the input image against all ETH & Polygon NFT images in our database and returns duplicates which pass the ```threshold```.\n\n**Supported file formats: JPG, JPEG, PNG, PPM, BMP, PGM, TIF, TIFF, WebP.**\n\n#### Useful for:\n* **Increase customer trust and lower fraud** - enable users to see if an NFT is unique or already minted/sold somewhere else by showing information on existing duplicate NFTs.\n* **Credit and protect creators** - build processes that defend against IP theft and/or credit the original authors when their work has been used in similar NFTs.\n* **Enable and attract large IP holders (e.g. Disney)** to upload content as NFTs by ensuring automatic copyright protection (similar to YouTube's Content ID).\n* **Finding original owner** - find the NFT owner simply with the NFT image.\n\n#### Related:\n* To find similar NFTs which can be used as recommendations, see [Find similar NFTs w/URL](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM4MzI-find-similar-nf-ts-w-url) or [Find similar NFTs w/file upload](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM4MzM-find-similar-nf-ts-w-file-upload).",
        "operationId": "similar_nfts_v0_duplicates_files_post",
        "parameters": [
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Threshold for classifying an NFT as a counterfeit.",
            "required": false,
            "schema": {
              "title": "Threshold",
              "maximum": 1,
              "minimum": 0.1,
              "type": "number",
              "description": "Threshold for classifying an NFT as a counterfeit.",
              "default": 0.9
            },
            "name": "threshold",
            "in": "query"
          },
          {
            "description": "NFTs from this contract address will be filtered out. Useful for examples where the whole NFT collection is visually very similar e.g. CryptoPunks.",
            "required": false,
            "schema": {
              "title": "Filter Out Contract Address",
              "type": "string",
              "description": "NFTs from this contract address will be filtered out. Useful for examples where the whole NFT collection is visually very similar e.g. CryptoPunks."
            },
            "name": "filter_out_contract_address",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_similar_nfts_v0_duplicates_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of counterfeit NFTs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/duplicates/urls": {
      "post": {
        "tags": [
          "Duplicate Detection AI"
        ],
        "summary": "Find counterfeit NFTs w/url",
        "description": "Analyzes the input image passed with ```url``` and returns duplicates (i.e. counterfeits) against it. Uses state of the art computer vision AI to match the input image against all ETH & Polygon NFT images in our database and returns duplicates which pass the ```threshold```.\n\n**Supported file formats: JPG, JPEG, PNG, PPM, BMP, PGM, TIF, TIFF, WebP.**\n\n#### Useful for:\n* **Increase customer trust and lower fraud** - enable users to see if an NFT is unique or already minted/sold somewhere else by showing information on existing duplicate NFTs.\n* **Credit and protect creators** - build processes that defend against IP theft and/or credit the original authors when their work has been used in similar NFTs.\n* **Enable and attract large IP holders (e.g. Disney)** to upload content as NFTs by ensuring automatic copyright protection (similar to YouTube's Content ID).\n* **Finding original owner** - find the NFT owner simply with the NFT image.\n\n#### Related:\n* To find similar NFTs which can be used as recommendations, see [Find similar NFTs w/URL](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM4MzI-find-similar-nf-ts-w-url) or [Find similar NFTs w/file upload](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM4MzM-find-similar-nf-ts-w-file-upload).",
        "operationId": "similar_nfts_url_v0_duplicates_urls_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentIdUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of counterfeit NFTs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/duplicates/tokens": {
      "post": {
        "tags": [
          "Duplicate Detection AI"
        ],
        "summary": "Find counterfeit NFTs w/token ID",
        "description": "Analyzes the input nft image passed with ```chain```,  ```contract_address``` and  ```token_id```,  and returns duplicates (i.e. counterfeits) against it. Uses state of the art computer vision AI to match the input image against all ETH & Polygon NFT images in our database and returns duplicates which pass the ```threshold```.\n\n**Supported file formats: JPG, JPEG, PNG, PPM, BMP, PGM, TIF, TIFF, WebP.**\n\n#### Useful for:\n* **Increase customer trust and lower fraud** - enable users to see if an NFT is unique or already minted/sold somewhere else by showing information on existing duplicate NFTs.\n* **Credit and protect creators** - build processes that defend against IP theft and/or credit the original authors when their work has been used in similar NFTs.\n* **Enable and attract large IP holders (e.g. Disney)** to upload content as NFTs by ensuring automatic copyright protection (similar to YouTube's Content ID).\n* **Finding original owner** - find the NFT owner simply with the NFT image.\n\n#### Related:\n* To find similar NFTs which can be used as recommendations, see [Find similar NFTs w/URL](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM4MzI-find-similar-nf-ts-w-url) or [Find similar NFTs w/file upload](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM4MzM-find-similar-nf-ts-w-file-upload).",
        "operationId": "similar_nfts_address_v0_duplicates_tokens_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentIdNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of counterfeit NFTs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/nfts": {
      "get": {
        "tags": [
          "nfts"
        ],
        "summary": "Return all NFTs",
        "description": "Returns all NFTs (contract address and token ID) for a given chain with a maximum of 100 tokens per page.\n\nTo get detailed information of the returned NFTs, see [/nfts/{contract_address}/{token_id}](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTc2NjI1MDg-returns-nft-details)\n\nEthereum mainnet and Polygon are supported.\n\nTo get data from other chains, [contact us.](https://www.nftport.xyz/contact)",
        "operationId": "nfts_nfts_get",
        "parameters": [
          {
            "description": "Blockchain where the NFTs smart contract lives",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NftsRequestSupportedChain"
                }
              ],
              "description": "Blockchain where the NFTs smart contract lives"
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Page size",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Page size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Simple NFT item that can be used to fetch detailed NFT from **\"/nfts/{contract_address}/{token_id}\"**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/nfts/{contract_address}": {
      "get": {
        "tags": [
          "nfts"
        ],
        "summary": "Return all NFTs for given contract address",
        "description": "Returns all NFTs for a given contract address.\n\nIncludes NFT metadata in response when include='metadata' is used.\n\nEthereum mainnet and Polygon are supported.\n\nTo get data from other chains, [contact us.](https://www.nftport.xyz/contact)",
        "operationId": "nfts_by_contract_nfts__contract_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string"
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "description": "Blockchain where the NFTs smart contract lives",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NftsRequestSupportedChain"
                }
              ],
              "description": "Blockchain where the NFTs smart contract lives"
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Page number",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1,
              "type": "integer",
              "description": "Page number",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "Page size",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "Page size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Include optional data",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetContractNftsRequestInclude"
                }
              ],
              "description": "Include optional data",
              "default": "default"
            },
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Includes NFT metadata in response when include='metadata' is used. Simple NFT item that can be used to fetch detailed NFT from **\"/nfts/{contract_address}/{token_id}\"**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/nfts/{contract_address}/{token_id}": {
      "get": {
        "tags": [
          "nfts"
        ],
        "summary": "Return NFT details",
        "description": "Returns details (token URI, available metadata, image URL and mint date) for a given NFT.\n\nEthereum mainnet and Polygon are supported.\n\nTo get data from other chains, [contact us.](https://www.nftport.xyz/contact)",
        "operationId": "nft_details_nfts__contract_address___token_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string"
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Token Id",
              "type": "string"
            },
            "name": "token_id",
            "in": "path"
          },
          {
            "description": "Blockchain where the NFTs smart contract lives",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NftsRequestSupportedChain"
                }
              ],
              "description": "Blockchain where the NFTs smart contract lives"
            },
            "name": "chain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "NFT details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__nfts__deprecated__entities__NftDetailsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/account/{account_address}/nfts": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Return NFTs owned by account",
        "description": "Returns details (contract address, token URI, name, description, asset URL and creator address) for NFTs owned by given account.\n\nEthereum and Tezos are supported. To get data from other chains, [contact us.](https://www.nftport.xyz/contact)\n\n**For Ethereum use the continuation string from response for pagination, for Polygon and Tezos use page number.**",
        "operationId": "account_nfts_account__account_address__nfts_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string"
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "Blockchain where the NFTs smart contract lives",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountRequestSupportedChain"
                }
              ],
              "description": "Blockchain where the NFTs smart contract lives"
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Page number",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1,
              "type": "integer",
              "description": "Page number",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "Page size",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "Page size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page"
            },
            "name": "continuation",
            "in": "query"
          },
          {
            "description": "Include optional data",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountRequestInclude"
                }
              ],
              "description": "Include optional data",
              "default": "default"
            },
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "NFT details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__account__deprecated__entities__AccountNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/text_search": {
      "get": {
        "tags": [
          "text-search"
        ],
        "summary": "Search over NFT metadata fields name and description",
        "description": "Search input text from the name and description metadata fields of NFTs.\n\nReturns details (chain, contract address, token ID, image URL, name, description and minted date) of the NFTs that match the text search input.\n\nEthereum mainnet and Polygon are supported (including cross-chain search).\n\nTo get data from other chains, [contact us.](https://www.nftport.xyz/contact)",
        "operationId": "text_search_text_search_get",
        "parameters": [
          {
            "description": "Search query",
            "required": true,
            "schema": {
              "title": "Text",
              "type": "string",
              "description": "Search query"
            },
            "name": "text",
            "in": "query"
          },
          {
            "description": "Blockchain where the NFTs smart contract lives",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TextSearchRequestChain"
                }
              ],
              "description": "Blockchain where the NFTs smart contract lives"
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Page number",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1,
              "type": "integer",
              "description": "Page number",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "Page size",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Page size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Results ordering criteria",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TextSearchRequestOrder"
                }
              ],
              "description": "Results ordering criteria",
              "default": "relevance"
            },
            "name": "order_by",
            "in": "query"
          },
          {
            "description": "Results will be sorted in this order (ascending/descending)",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TextSearchRequestSortOrder"
                }
              ],
              "description": "Results will be sorted in this order (ascending/descending)",
              "default": "desc"
            },
            "name": "sort_order",
            "in": "query"
          },
          {
            "description": "Results will only include NFTs from this contract address",
            "required": false,
            "schema": {
              "title": "Filter By Contract Address",
              "type": "string",
              "description": "Results will only include NFTs from this contract address"
            },
            "name": "filter_by_contract_address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Simple NFT item that can be used to fetch detailed NFT from **\"/nfts/{contract_address}/{token_id}\"**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__text_search__deprecated__entities__TextSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/visual_search": {
      "post": {
        "tags": [
          "visual-search"
        ],
        "summary": "Search over NFT visual content by keywords",
        "description": "Visual content search from NFTs by keywords.\n\nUses ML models to match the keywords with the visual content of the indexed NFTs.\n\nReturns available details (contract address, token ID, image URL etc.) of NFTs that have sufficient  relation with the keywords.\n\nEthereum mainnet and Polygon are supported.\n\nTo get data from other chains, [contact us.](https://www.nftport.xyz/contact)",
        "operationId": "search_visual_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of NFTs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__search__deprecated__entities__SearchResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/visual_search_by_url": {
      "post": {
        "tags": [
          "visual-search"
        ],
        "summary": "Search over NFT visual content by image url",
        "description": "Visual content search of NFTs by image url (.jpg, .jpeg, .png, .webp allowed).\n\nUses ML models to match the image in the linked URL with the visual content of the indexed NFTs.\n\nReturns available details (contract address, token ID, image URL etc.) of NFTs that are similar to the linked URL.\n\nEthereum mainnet and Polygon are supported.\n\nTo get data from other chains, [contact us.](https://www.nftport.xyz/contact)\n\n**Maximum supported filesize is 20MB.**",
        "operationId": "search_url_visual_search_by_url_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__service__search__deprecated__search_url_request__SearchUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of NFTs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__search__deprecated__entities__SearchResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/visual_search_by_file": {
      "post": {
        "tags": [
          "visual-search"
        ],
        "summary": "Search over NFT visual content by image file",
        "description": "Visual content search of NFTs by image file.\n\nUses ML models to match the input image file with the visual content of the indexed NFTs.\n\nReturns available details (contract address, token ID, image URL etc.) of NFTs that are similar to the input image.\n\nEthereum mainnet and Polygon are supported.\n\nTo get data from other chains, [contact us.](https://www.nftport.xyz/contact)\n\n**Maximum supported filesize is 20MB.**",
        "operationId": "search_file_visual_search_by_file_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_search_file_visual_search_by_file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of NFTs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__search__deprecated__entities__SearchResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/contract": {
      "get": {
        "tags": [
          "contract"
        ],
        "summary": "Return deployed contract info",
        "description": "After getting the transaction hash by deploying your contract with [POST /contract](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTc0MDA0NDg-deploy-an-nft-contract), this end-point can be used to check if the contract is on chain and get the contract address for /[mint_nft](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTM4MTY5OTc-mint-an-nft) or [/mint_nft_with_upload](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTM5MDY3Mjc-mint-an-nft-with-file-uploads)\n\nAs blockchains take time to sync, this endpoint should be polled until the contract address is returned.\n    ",
        "operationId": "get_deployed_contract_contract_get",
        "parameters": [
          {
            "description": "Blockchain where the NFTs smart contract lives",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DeployContractChain"
                }
              ],
              "description": "Blockchain where the NFTs smart contract lives"
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Transaction hash that was returned from deploy contract endpoint",
            "required": true,
            "schema": {
              "title": "Transaction Hash",
              "type": "string",
              "description": "Transaction hash that was returned from deploy contract endpoint"
            },
            "name": "transaction_hash",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Chain and contract address of the deployed contract",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeployedContractResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "contract"
        ],
        "summary": "Deploy an NFT contract",
        "description": "Before you can start minting NFTs with /[mint_nft](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTM4MTY5OTc-mint-an-nft) or [/mint_nft_with_upload](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTM5MDY3Mjc-mint-an-nft-with-file-uploads),  a contract representing your collections has to be created.\n\nThe endpoint deploys a standard [ERC-721](https://eips.ethereum.org/EIPS/eip-721) smart contract where your NFTs will be minted.\n\nYou need to specify the chain (either [Polygon](https://decrypt.co/resources/what-is-polygon-matic-and-why-it-matters-for-ethereum) or [Rinkeby](https://ethereum.org/en/developers/docs/networks)), the name and symbol of your contract.\n\nReturns transaction hash of the created contract that can be used to get your contract address under the endpoint [GET /contract](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTc0MDA0NDc-returns-deployed-contract-info).\n\nKeep in mind that blockchains can be slow at times and minting does not happen immediately. Therefore, after contract deployment, the end-point [GET /contract](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTc0MDA0NDc-returns-deployed-contract-info) should be polled until the deployed contract address is returned.\n    ",
        "operationId": "deploy_contract_contract_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployContractRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Name and symbol of the NFT contract ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__contract__deprecated__entities__DeployContractResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/ipfs_upload_file": {
      "post": {
        "tags": [
          "advanced-minting"
        ],
        "summary": "Upload a file to IPFS",
        "description": "If you already have or prefer files hosted in your own server, you can skip this step. If you do not have a file uploaded, we recommend you to use this endpoint for distributed storage provided by [IPFS (industry standard)](https://docs.ipfs.io/concepts/what-is-ipfs/) to guarantee the immutability of your file.\n\nReturns the IPFS URL of the file, which will be included in the NFT's metadata under [/ipfs_upload_metadata](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTM4MTY5OTY-upload-metadata-to-ipfs).\n\n**Maximum supported filesize is 20MB**\n    ",
        "operationId": "ipfs_upload_file_ipfs_upload_file_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_ipfs_upload_file_ipfs_upload_file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "IPFS url of the uploaded file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpfsFileUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/ipfs_upload_metadata": {
      "post": {
        "tags": [
          "advanced-minting"
        ],
        "summary": "Upload metadata to IPFS",
        "description": "Upload NFT metadata to IPFS as a JSON file. Specify the NFTs name, a short description and the file URL (which you host yourself or have uploaded with [/ipfs_upload_file](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTM4MTY5OTU-upload-a-file-to-ipfs)).\n\nYou can also add a list of attributes according to:  [https://docs.opensea.io/docs/metadata-standards#attributes](https://docs.opensea.io/docs/metadata-standards#attributes)\n\nReturns the IPFS URI of the uploaded JSON file, that can be used in [/mint_nft](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTM4MTY5OTc-mint-an-nft).\n    ",
        "operationId": "ipfs_upload_metadata_ipfs_upload_metadata_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__service__minting__deprecated__entities__IpfsMetadataUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "IPFS URI of the uploaded metadata file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__minting__deprecated__entities__IpfsMetadataUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/mint_nft": {
      "post": {
        "tags": [
          "advanced-minting"
        ],
        "summary": "Mint an NFT",
        "description": "Mint an NFT on [Polygon](https://decrypt.co/resources/what-is-polygon-matic-and-why-it-matters-for-ethereum) or [Rinkeby](https://ethereum.org/en/developers/docs/networks) by entering a contract address, metadata URI and the owner's wallet address.\n\nIf you are missing the contract address, see [POST /contract](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTc0MDA0NDg-deploy-an-nft-contract).\n\nIf you are missing the metadata URI, see [/ipfs_upload_metadata](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTM4MTY5OTY-upload-metadata-to-ipfs).\n\nReturns contract address and transaction hash of the NFT minting transaction.\n\nAfter minting, the NFT will appear in the specified owner's wallet. In a few minutes, you can see the minted NFT on OpenSea either in your profile (if you minted to your own wallet) or at:\n\nPolygon [https://opensea.io/assets/matic/](https://opensea.io/assets/matic/)<contract_address>/<token_id>\n\nRinkeby [https://testnets.opensea.io/assets/](https://testnets.opensea.io/assets/)<contract_address>/<token_id>\n\n**Maximum supported filesize is 20MB.**\n\n**You can mint up to 1000 NFTs for free per chain.**\n    ",
        "operationId": "mint_nft_mint_nft_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MintNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Contract address and transaction hash",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/easy_mint": {
      "post": {
        "tags": [
          "easy-minting"
        ],
        "summary": "Easy mint",
        "description": "With Easy mint, you can turn anything into an NFT in less than 120 seconds using one simple API call.\n\n### Instructions\n\nAll the blockchain complexity is taken care for you automatically. You just need to provide:\n\n1. A name for your NFT\n2. A description for your NFT\n3. The chain where the NFT will be minted. We recommend [Polygon](https://decrypt.co/resources/what-is-polygon-matic-and-why-it-matters-for-ethereum) which enables free and green NFT minting. In short, it's the leading layer 2 scaling solution built on top of Ethereum. Rinkeby is Ethereum's testnet.\n4. The [wallet](https://ethereum.org/en/wallets/) address where to mint the NFT. If you want to mint to your own wallet, then provide your own wallet address (e.g. copy-paste from MetaMask). In both Polygon and Rinkeby cases, it's your regular Ethereum wallet address.\n5. Select the path to your locally stored file. For example, file=/path/to/file.png. All file types are supported including binary, images, GIFs, videos, audio, documents, text, etc.\n\n<!-- theme: success -->\n\n> #### Your NFT is ready! That was easy, huh? 😎\n\nAfter minting, the NFT will appear in the specified wallet. You can also see, sell or trade the NFT on OpenSea under your [account](https://opensea.io/account) (if you minted to your own wallet) or at [NFTPort](https://opensea.io/collection/nftport-xyz) collection. It usually takes a few minutes for OpenSea to update their database.\n\n### Example Requests in cURL, Python & JS\n\n<!--\ntitle: \"Make sure to replace the parameters with your own values\"\nlineNumbers: true\n-->\n\n```shell\ncurl --request POST \\\n    --url 'https://api.nftport.xyz/easy_mint?chain=polygon&name=NFT_Name&description=NFT_Description&mint_to_address=0x...' \\\n    --header 'Authorization: API Key Here' \\\n    --header 'Content-Type: multipart/form-data' \\\n    --form 'file=@/path/to/file_to_upload.png;type=image/png'\n```\n\n```python\nwith open(\"image.png\", \"rb\") as f:\n    file = f.read()\n\nquery_params = {\n    \"chain\": \"polygon\",\n    \"name\": \"NFT_Name\",\n    \"description\": \"NFT_Description\",\n    \"mint_to_address\": Wallet_Address\n}\n\nresponse = requests.post(\n    \"https://api.nftport.xyz/easy_mint\",\n    headers={\"Authorization\": API_Key},\n    params=query_params,\n    files={\"file\": file}\n)\n```\n\n```javascript\nconst fs = require('fs');\nconst fetch = require('node-fetch');\nconst FormData = require('form-data');\n\nconst form = new FormData();\nconst fileStream = fs.createReadStream('/path/to/file_to_upload.png');\nform.append('file', fileStream);\n\nconst options = {\n  method: 'POST',\n  body: form,\n  headers: {\n    \"Authorization\": \"API_Key\",\n  },\n};\n\nfetch(\"https://api.nftport.xyz/easy_mint?\" + new URLSearchParams({\n  chain: 'polygon',\n  name: \"NFT_Name\",\n  description: \"NFT_Description\",\n  mint_to_address: \"Wallet_Address\",\n}), options)\n  .then(function(response) { return response.json() })\n  .then(function(responseJson) {\n    // Handle the response\n    console.log(responseJson);\n  })\n```\n\n<!-- theme: warning -->\n\n> #### Sending a request in the UI widget is not working at the moment for easy mint so we recommend using the Curl or calling it from code.\n\n### In short, Easy mint automatically:\n\n1. Uploads the file to [IPFS](https://docs.ipfs.io/concepts/what-is-ipfs/)\n2. Creates a metadata file (JSON) with the file's name, description and URL and uploads it to IPFS\n3. Creates i.e. mints the NFT (with a reference to the metadata URI)\n\n### Support\nPlease join our [Discord](https://discord.gg/bE2cn9qCRg) community if you need support from our team and a space to discuss NFT related topics, voice feature requests, and engage with other like-minded NFT developers and creators.\n\n### FAQ\n\n1. **I'm getting an error: There was an error parsing the body.** The interactive code example is unfortunately broken at the moment and the documentation provider is fixing it. Until that, please use the code snippet.\n\n2. **Maximum supported filesize is 20MB.** Write on Discord if you need to mint larger files.\n\n3. **You can mint up to 1000 NFTs for free per chain.** This is to prevent us getting DDOS'd. If you need to mint more than 1K NFTs, then write on Discord.\n\n4. To customize and manage the minting process in separate steps, see [Advanced Minting APIs](https://docs.nftport.xyz/docs/nftport/branches/deprecated/ZG9jOjE3NDI3MDc3-minting-quickstart#advanced-minting-apis).",
        "operationId": "mint_nft_with_upload_easy_mint_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MintNftRequestChain"
            },
            "name": "chain",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Description",
              "type": "string"
            },
            "name": "description",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Mint To Address",
              "type": "string"
            },
            "name": "mint_to_address",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_mint_nft_with_upload_easy_mint_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns contract address and the transaction hash which can be used in [Return minted NFT](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTc0MDA0NTM-returns-minted-nft) to receive the token ID and confirm that the minting was successful (minting can take up to a few minutes depending on how congested is the network).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintNftWithUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/mint_nft_with_upload": {
      "post": {
        "tags": [
          "advanced-minting"
        ],
        "summary": "Mint an NFT with file upload",
        "description": "Upload a file and the metadata to [IPFS](https://docs.ipfs.io/concepts/what-is-ipfs/),\nand mint an NFT on [Polygon](https://decrypt.co/resources/what-is-polygon-matic-and-why-it-matters-for-ethereum)\nor [Rinkeby](https://ethereum.org/en/developers/docs/networks).\n\nYou need to enter a contract address, the NFT's name and description, and\nthe owner's wallet address. This is a combined and simplified version of\n[/ipfs_upload_file](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTM4MTY5OTU-upload-a-file-to-ipfs),\n[/ipfs_upload_metadata](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTM4MTY5OTY-upload-metadata-to-ipfs)\nand [/mint_nft](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTM4MTY5OTc-mint-an-nft).\n\nIn case you are missing the contract address, then see\n[POST /contract](https://docs.nftport.xyz/docs/nftport/branches/deprecated/b3A6MTc0MDA0NDg-deploy-an-nft-contract).\n\nReturns Contract address and Transaction hash of the NFT minting transaction.\n\nAfter minting, the NFT will appear in the specified owner's wallet. In a\nfew minutes, you can see the minted NFT on OpenSea either in your profile\n(if you minted to your own wallet) or at:\n\nPolygon https://opensea.io/assets/matic/<contract_address>/<token_id>\n\nRinkeby https://testnets.opensea.io/assets/<contract_address>/<token_id>\n\n**Maximum supported filesize is 20MB.**\n\n**You can mint up to 1000 NFTs for free per chain.**",
        "operationId": "mint_nft_with_upload_mint_nft_with_upload_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MintNftRequestChain"
            },
            "name": "chain",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string"
            },
            "name": "contract_address",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Description",
              "type": "string"
            },
            "name": "description",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Mint To Address",
              "type": "string"
            },
            "name": "mint_to_address",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_mint_nft_with_upload_mint_nft_with_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Contract address and transaction hash",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintNftWithUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/get_minted_nft": {
      "get": {
        "tags": [
          "easy-minting",
          "advanced-minting"
        ],
        "summary": "Return minted NFT",
        "description": "Based on the minting transaction hash, returns the minted NFT's contract address and the token ID.\n\nNote that blockchains can be slow and minting can take some time.",
        "operationId": "get_minted_nft_get_minted_nft_get",
        "parameters": [
          {
            "description": "Blockchain where the NFTs smart contract lives",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MintNftRequestChain"
                }
              ],
              "description": "Blockchain where the NFTs smart contract lives"
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Transaction hash that was returned from mint NFT endpoint",
            "required": true,
            "schema": {
              "title": "Transaction Hash",
              "type": "string",
              "description": "Transaction hash that was returned from mint NFT endpoint"
            },
            "name": "transaction_hash",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Chain, contract address and token id that represent an NFT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMintedNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/similar_nfts": {
      "post": {
        "tags": [
          "content-nftid"
        ],
        "summary": "Return visually similar NFTs using copy detection AI",
        "description": "Uses state-of-the-art copy detection AI models to analyse NFT images across chains and detect visually similar images i.e. image copies.\n\n### Some example use-cases:\n\n* **Increase customer trust and lower fraud** - enable users to see if an NFT is unique or already minted/sold somewhere else by showing information on existing duplicate NFTs.\n* **Credit and protect creators** -  build processes that defend against IP theft and/or credit the original authors when their work has been used in similar NFTs\n* **Enable and attract large IP holders (e.g. Disney)** to upload content as NFTs by ensuring automatic copyright protection (similar to YouTube's Content ID)\n\n**Supported file formats: jpg, jpeg, png, ppm, bmp, pgm, tif, tiff, webp**\n\nSupport for other formats to be added soon.\n\nImages from Ethereum mainnet and Polygon are supported.\n\nTo get data from other chains or with other formats, [contact us](https://www.nftport.xyz/contact).",
        "operationId": "similar_nfts_similar_nfts_post",
        "parameters": [
          {
            "description": "Maximum amount of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "Maximum amount of results",
              "default": 5
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Threshold for classifying an NFT as a match",
            "required": false,
            "schema": {
              "title": "Threshold",
              "maximum": 1,
              "minimum": 0.1,
              "type": "number",
              "description": "Threshold for classifying an NFT as a match",
              "default": 0.9
            },
            "name": "threshold",
            "in": "query"
          },
          {
            "description": "NFTs from this contract address will be filtered out. Useful for examples where the whole NFT collection is visually very similar e.g. CryptoPunks",
            "required": false,
            "schema": {
              "title": "Contract Address",
              "type": "string",
              "description": "NFTs from this contract address will be filtered out. Useful for examples where the whole NFT collection is visually very similar e.g. CryptoPunks"
            },
            "name": "contract_address",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_similar_nfts_similar_nfts_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of detected similar NFTs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/me/contracts": {
      "get": {
        "tags": [
          "user-profile"
        ],
        "summary": "Returns user's contracts",
        "description": "Returns the contracts deployed by the NFTPort user.",
        "operationId": "get_user_contracts_me_contracts_get",
        "responses": {
          "200": {
            "description": "List of contracts deployed by the NFTPort user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserProfileContractsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/me/minted_nfts": {
      "get": {
        "tags": [
          "user-profile"
        ],
        "summary": "Returns NFTs minted by NFTPort user",
        "description": "Returns the details of the NFTs minted by the NFTPort user.",
        "operationId": "get_user_minted_nfts_me_minted_nfts_get",
        "parameters": [
          {
            "description": "Blockchain specifying the NFTs smart contract location",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MintNftRequestChain"
                }
              ],
              "description": "Blockchain specifying the NFTs smart contract location"
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Page number",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1,
              "type": "integer",
              "description": "Page number",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "Page size",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Page size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of NFTs minted by the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__service__minting__deprecated__entities__GetUserProfileMintedNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccountRequestInclude": {
        "title": "AccountRequestInclude",
        "enum": [
          "default",
          "metadata"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AccountRequestSupportedChain": {
        "title": "AccountRequestSupportedChain",
        "enum": [
          "ethereum",
          "polygon",
          "tezos"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "Bids": {
        "title": "Bids",
        "required": [
          "type",
          "bidder_address",
          "nft",
          "price_details",
          "transaction_date"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": [
              "bid",
              "cancel_bid"
            ],
            "type": "string",
            "description": "Activity type."
          },
          "bidder_address": {
            "title": "Bidder Address",
            "type": "string",
            "description": "Account address of the bidder."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__transactions__entities__Nft"
              }
            ],
            "description": "Details of the NFT."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFTs bid on (can be more than 1 NFT for ERC1155)."
          },
          "price_details": {
            "title": "Price Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceDetails"
              }
            ],
            "description": "Price details of the bid."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "block_hash": {
            "title": "Block Hash",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "block_number": {
            "title": "Block Number",
            "type": "integer",
            "description": "Number of the block in which the transaction is recorded."
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          },
          "marketplace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Marketplace"
              }
            ],
            "description": "Marketplace where the bid was made."
          }
        },
        "example": {
          "type": "bid",
          "bidder_address": "0xb4cdc8dfd9ce9bf647f38cd8278036c0aacdc91e",
          "nft": {
            "contract_type": "ERC1155_lazy",
            "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
            "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
            "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
            "creators": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "creator_share": "10000"
              }
            ],
            "royalties": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "royalty_share": "1000"
              }
            ],
            "signatures": [
              "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
            ],
            "total": 5000
          },
          "quantity": 1,
          "bid_details": {
            "asset_type": "ERC20",
            "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
            "price": "0.071",
            "price_usd": 271.5
          },
          "transaction_date": "2021-12-03T01:28:55.961",
          "marketplace": "opensea"
        }
      },
      "Body_easy_mint_nft_with_upload_v0_mints_easy_files_post": {
        "title": "Body_easy_mint_nft_with_upload_v0_mints_easy_files_post",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "description": "The file you want to mint. All file types are supported. Maximum file size is 20MB.",
            "format": "binary"
          }
        }
      },
      "Body_ipfs_upload_file_ipfs_upload_file_post": {
        "title": "Body_ipfs_upload_file_ipfs_upload_file_post",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Body_ipfs_upload_file_v0_files_post": {
        "title": "Body_ipfs_upload_file_v0_files_post",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "description": "The file to upload to IPFS. All file types are supported. Maximum file size is 20MB.",
            "format": "binary"
          }
        }
      },
      "Body_mint_nft_with_upload_easy_mint_post": {
        "title": "Body_mint_nft_with_upload_easy_mint_post",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Body_mint_nft_with_upload_mint_nft_with_upload_post": {
        "title": "Body_mint_nft_with_upload_mint_nft_with_upload_post",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Body_search_file_v0_recommendations_similar_nfts_files_post": {
        "title": "Body_search_file_v0_recommendations_similar_nfts_files_post",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "description": "Input image based on which visually and contextually similar NFTs will be recommended. Supports .JPG, .JPEG, .PNG, .WebP file formats.",
            "format": "binary"
          }
        }
      },
      "Body_search_file_visual_search_by_file_post": {
        "title": "Body_search_file_visual_search_by_file_post",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Body_similar_nfts_similar_nfts_post": {
        "title": "Body_similar_nfts_similar_nfts_post",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Body_similar_nfts_v0_duplicates_files_post": {
        "title": "Body_similar_nfts_v0_duplicates_files_post",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "description": "Input image which will be analyzed to find duplicates. Supports .JPG, .JPEG, .PNG, .WebP, .PPM, .BMP, .PGM, .TIF, .TIFF, file formats.",
            "format": "binary"
          }
        }
      },
      "CollectionStats": {
        "title": "CollectionStats",
        "type": "object",
        "properties": {
          "one_day_volume": {
            "title": "One Day Volume",
            "type": "number",
            "description": "Volume of sales in the last 24 hours in ETH."
          },
          "one_day_change": {
            "title": "One Day Change",
            "type": "number",
            "description": "Change in volume of sales in the last 24 hours in ETH."
          },
          "one_day_sales": {
            "title": "One Day Sales",
            "type": "number",
            "description": "Number of sales in the last 24 hours."
          },
          "one_day_average_price": {
            "title": "One Day Average Price",
            "type": "number",
            "description": "Average price in the last 24 hours in ETH."
          },
          "seven_day_volume": {
            "title": "Seven Day Volume",
            "type": "number",
            "description": "Volume of sales in the last 7 days in ETH."
          },
          "seven_day_change": {
            "title": "Seven Day Change",
            "type": "number",
            "description": "Change in volume of sales in the last 7 days in ETH."
          },
          "seven_day_sales": {
            "title": "Seven Day Sales",
            "type": "number",
            "description": "Number of sales in the last 7 days."
          },
          "seven_day_average_price": {
            "title": "Seven Day Average Price",
            "type": "number",
            "description": "Average price in the last 7 days in ETH."
          },
          "thirty_day_volume": {
            "title": "Thirty Day Volume",
            "type": "number",
            "description": "Volume of sales in the last 30 days in ETH."
          },
          "thirty_day_change": {
            "title": "Thirty Day Change",
            "type": "number",
            "description": "Change in volume of sales in the last 30 days in ETH."
          },
          "thirty_day_sales": {
            "title": "Thirty Day Sales",
            "type": "number",
            "description": "Number of sales in the last 30 days."
          },
          "thirty_day_average_price": {
            "title": "Thirty Day Average Price",
            "type": "number",
            "description": "Average price in the last 30 days in ETH."
          },
          "total_volume": {
            "title": "Total Volume",
            "type": "number",
            "description": "Total volume of sales in ETH."
          },
          "total_sales": {
            "title": "Total Sales",
            "type": "number",
            "description": "Total number of sales."
          },
          "total_supply": {
            "title": "Total Supply",
            "type": "number",
            "description": "Total number of NFTs in supply."
          },
          "total_minted": {
            "title": "Total Minted",
            "type": "number",
            "description": "Total number of NFTs minted."
          },
          "num_owners": {
            "title": "Num Owners",
            "type": "number",
            "description": "Total number of owners."
          },
          "average_price": {
            "title": "Average Price",
            "type": "number",
            "description": "Average price of the collection since inception in ETH."
          },
          "market_cap": {
            "title": "Market Cap",
            "type": "number",
            "description": "Market cap of the collection in ETH."
          },
          "floor_price": {
            "title": "Floor Price",
            "type": "number",
            "description": "Floor price of the collection in ETH."
          }
        },
        "example": {
          "one_day_volume": 194.7981,
          "one_day_change": 0.4513354577078356,
          "one_day_sales": 42,
          "one_day_average_price": 4.63805,
          "seven_day_volume": 1099.074207520107,
          "seven_day_change": -0.052033968595019554,
          "seven_day_sales": 342,
          "seven_day_average_price": 3.213667273450605,
          "thirty_day_volume": 11672.513885632954,
          "thirty_day_change": -0.2564477340345068,
          "thirty_day_sales": 3635,
          "thirty_day_average_price": 3.211145498110854,
          "total_volume": 27370.823769036146,
          "total_sales": 13988,
          "total_supply": 9999,
          "total_minted": 9999,
          "num_owners": 5250,
          "average_price": 1.956736042967983,
          "market_cap": 32133.4590672326,
          "floor_price": 2.4
        }
      },
      "CollectionStatsResponse": {
        "title": "CollectionStatsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "statistics": {
            "title": "Statistics",
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionStats"
              }
            ],
            "description": "In-depth statistics of the queried NFT contract."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "statistics": {
            "one_day_volume": 194.7981,
            "one_day_change": 0.4513354577078356,
            "one_day_sales": 42,
            "one_day_average_price": 4.63805,
            "seven_day_volume": 1099.074207520107,
            "seven_day_change": -0.052033968595019554,
            "seven_day_sales": 342,
            "seven_day_average_price": 3.213667273450605,
            "thirty_day_volume": 11672.513885632954,
            "thirty_day_change": -0.2564477340345068,
            "thirty_day_sales": 3635,
            "thirty_day_average_price": 3.211145498110854,
            "total_volume": 27370.823769036146,
            "total_sales": 13988,
            "total_supply": 9999,
            "total_minted": 9999,
            "num_owners": 5250,
            "average_price": 1.956736042967983,
            "market_cap": 32133.4590672326,
            "floor_price": 2.4
          }
        }
      },
      "ContentIdNftRequest": {
        "title": "ContentIdNftRequest",
        "required": [
          "chain",
          "contract_address",
          "token_id"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "ethereum",
              "polygon"
            ],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique uint256 ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "page_number": {
            "title": "Page Number",
            "minimum": 1,
            "type": "integer",
            "description": "The page number of the results to return. The first page is 1.",
            "default": 1
          },
          "page_size": {
            "title": "Page Size",
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "default": 50
          },
          "threshold": {
            "title": "Threshold",
            "maximum": 1,
            "minimum": 0.1,
            "type": "number",
            "description": "Threshold for classifying an NFT as a counterfeit.",
            "default": 0.9
          },
          "filter_out_contract_address": {
            "title": "Filter Out Contract Address",
            "type": "string",
            "description": "NFTs from this contract address will be filtered out. Useful for examples where the whole NFT collection is visually very similar e.g. CryptoPunks."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
          "token_id": "9999",
          "page_number": 1,
          "page_size": 50,
          "threshold": 0.9
        }
      },
      "ContentIdResponse": {
        "title": "ContentIdResponse",
        "required": [
          "response",
          "similar_nfts"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "is_similar": {
            "title": "Is Similar",
            "type": "boolean",
            "description": "Returns true if a match is found, false otherwise."
          },
          "similar_nfts": {
            "title": "Similar Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuplicateNFTResponseModel"
            },
            "description": "Details of matching NFTs if found."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "is_similar": true,
          "similar_nfts": [
            {
              "contract_address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
              "token_id": "3100",
              "chain": "ethereum",
              "similarity": 0.999998,
              "file_url": "https://www.larvalabs.com/cryptopunks/cryptopunk3100.png",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb_t_3100_raw_asset.png",
              "metadata_url": "https://api.niftygateway.com/beeple/100030071/",
              "metadata": {
                "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
                "background_color": "ffffff",
                "external_url": "https://niftygateway.com/#/",
                "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
                "name": "POLITICS IS BULLSHIT #71/100",
                "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
              },
              "mint_date": "2020-10-29T15:03:54.838612"
            }
          ]
        }
      },
      "ContentIdUrlRequest": {
        "title": "ContentIdUrlRequest",
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "URL that points to the image that returns a Content-Length and Content-Type header or contains the file extension. Supports .JPG, .JPEG, .PNG, .WebP, .PPM, .BMP, .PGM, .TIF, .TIFF file formats."
          },
          "page_number": {
            "title": "Page Number",
            "minimum": 1,
            "type": "integer",
            "description": "The page number of the results to return. The first page is 1.",
            "default": 1
          },
          "page_size": {
            "title": "Page Size",
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "default": 50
          },
          "threshold": {
            "title": "Threshold",
            "maximum": 1,
            "minimum": 0.1,
            "type": "number",
            "description": "Threshold for classifying an NFT as a counterfeit.",
            "default": 0.9
          },
          "filter_out_contract_address": {
            "title": "Filter Out Contract Address",
            "type": "string",
            "description": "NFTs from this contract address will be filtered out. Useful for examples where the whole NFT collection is visually very similar e.g. CryptoPunks."
          }
        },
        "example": {
          "url": "https://www.larvalabs.com/cryptopunks/cryptopunk7597.png",
          "page_number": 1,
          "page_size": 50,
          "threshold": 0.9
        }
      },
      "ContractInfoResponse": {
        "title": "ContractInfoResponse",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the contract."
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Symbol of the contract."
          },
          "type": {
            "title": "Type",
            "enum": [
              "ERC721",
              "ERC1155"
            ],
            "type": "string",
            "description": "Contract type."
          }
        },
        "example": {
          "name": "Decentraland LAND",
          "symbol": "LAND",
          "type": "ERC721"
        }
      },
      "ContractNft": {
        "title": "ContractNft",
        "required": [
          "chain",
          "contract_address",
          "token_id"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "ethereum",
              "polygon"
            ],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "Original file (image, video, etc) URL of the NFT."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          },
          "file_information": {
            "title": "File Information",
            "allOf": [
              {
                "$ref": "#/components/schemas/NftAssetMetadata"
              }
            ],
            "description": "Extra information of the NFT’s file."
          },
          "updated_date": {
            "title": "Updated Date",
            "type": "string",
            "description": "Date when the NFT’s metadata was last downloaded or updated/refreshed."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "token_id": "100030071",
          "metadata": {
            "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
            "background_color": "ffffff",
            "external_url": "https://niftygateway.com/#/",
            "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
            "name": "POLITICS IS BULLSHIT #71/100",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
          },
          "metadata_url": "https://api.niftygateway.com/beeple/100030071",
          "file_url": "https://lh3.googleusercontent.com/79JB1V9gSMv83iMs-Db4qdpPVdpKiyt_sjGLgs575wLEgWjSRLCzMQMoxaealYz7AVCKY_mzSy6GlOYdGt_7aaCZfg",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
          "mint_date": "2020-10-29T15:03:54.838612",
          "file_information": {
            "height": 512,
            "width": 512,
            "file_size": 310751
          },
          "updated_date": "2021-10-19T15:03:54.838612"
        }
      },
      "ContractNftsResponse": {
        "title": "ContractNftsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractNft"
            },
            "description": "Details of the NFTs."
          },
          "contract": {
            "title": "Contract",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractInfoResponse"
              }
            ],
            "description": "Information of the NFT’s contract."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of NFTs in the given contract address."
          },
          "status": {
            "title": "Status",
            "enum": [
              "ADDED",
              "PROCESSING",
              "PENDING",
              "REFRESHED_RECENTLY"
            ],
            "type": "string",
            "description": "Status of the contract tokens in the metadata refresh queue."
          },
          "status_message": {
            "title": "Status Message",
            "type": "string",
            "description": "Detailed description of the ```status```."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "chain": "ethereum",
              "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
              "token_id": "100030071",
              "metadata": {
                "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
                "background_color": "ffffff",
                "external_url": "https://niftygateway.com/#/",
                "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
                "name": "POLITICS IS BULLSHIT #71/100",
                "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
              },
              "metadata_url": "https://api.niftygateway.com/beeple/100030071",
              "file_url": "https://lh3.googleusercontent.com/79JB1V9gSMv83iMs-Db4qdpPVdpKiyt_sjGLgs575wLEgWjSRLCzMQMoxaealYz7AVCKY_mzSy6GlOYdGt_7aaCZfg",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
              "mint_date": "2020-10-29T15:03:54.838612",
              "file_information": {
                "height": 512,
                "width": 512,
                "file_size": 310751
              },
              "updated_date": "2021-10-19T15:03:54.838612"
            }
          ],
          "contract": {
            "name": "Decentraland LAND",
            "symbol": "LAND",
            "type": "ERC721"
          },
          "total": 102
        }
      },
      "ContractType": {
        "title": "ContractType",
        "enum": [
          "ERC721",
          "ERC1155",
          "ERC721_lazy",
          "ERC1155_lazy"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "CreatorNft": {
        "title": "CreatorNft",
        "required": [
          "chain",
          "contract_address",
          "token_id"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "ethereum"
            ],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "File (image, video, etc) URL of the NFT."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "owner_addresses": {
            "title": "Owner Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of account (i.e. wallet) addresses that own the NFT. For ERC1155, multiple owners can own the same NFT."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0xafb44cef938b1be600a4331bf9904f6cec2fcac3",
          "token_id": "4083388403051261561560495289181218537481",
          "name": "UniSwamp",
          "description": "The UniSwamp is ground zero for warfare with The Institution and its army of Shills. Technically, “District 16”, Uniswamp is a region in southwest Cyber City still left unclaimed by the corporations. The de-facto home of the Cyber City underworld, Uniswamp is infested by renegade shills who do anything to turn a quick buck. Without proper guidance, all those who enter the UniSwamp are consumed by its devious inhabitants, leaving them rekt.",
          "metadata": {
            "animation_url": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.mp4",
            "attributes": [
              {
                "trait_type": "Name",
                "value": "UniSwamp"
              },
              {
                "trait_type": "Variant",
                "value": "3D Animated"
              },
              {
                "trait_type": "Rarity",
                "value": "Epic"
              },
              {
                "display_type": "number",
                "trait_type": "Vote Power",
                "value": 5
              },
              {
                "max_value": 50,
                "trait_type": "Issue",
                "value": 9
              }
            ],
            "collection": "EllioTrades",
            "description": "The UniSwamp is ground zero for warfare with The Institution and its army of Shills. Technically, “District 16”, Uniswamp is a region in southwest Cyber City still left unclaimed by the corporations. The de-facto home of the Cyber City underworld, Uniswamp is infested by renegade shills who do anything to turn a quick buck. Without proper guidance, all those who enter the UniSwamp are consumed by its devious inhabitants, leaving them rekt.",
            "groupSize": 50,
            "image": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.png",
            "issue": 9,
            "name": "UniSwamp",
            "type": "video/mp4",
            "video": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.mp4"
          },
          "metadata_url": "https://superfarm-metadata.s3.amazonaws.com/EllioTrades/0000000000000000000000000000000c00000000000000000000000000000009.json",
          "file_url": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.png",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0xafb44cef938b1be600a4331bf9904f6cec2fcac3_t_4083388403051261561560495289181218537481_raw_asset.png",
          "owner_addresses": [
            "0x86872bf79c77cc9f4244d70ede7a8a7a69a6864e"
          ]
        }
      },
      "CreatorNftsResponse": {
        "title": "CreatorNftsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatorNft"
            }
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for the next page."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "chain": "ethereum",
              "contract_address": "0xafb44cef938b1be600a4331bf9904f6cec2fcac3",
              "token_id": "4083388403051261561560495289181218537481",
              "name": "UniSwamp",
              "description": "The UniSwamp is ground zero for warfare with The Institution and its army of Shills. Technically, “District 16”, Uniswamp is a region in southwest Cyber City still left unclaimed by the corporations. The de-facto home of the Cyber City underworld, Uniswamp is infested by renegade shills who do anything to turn a quick buck. Without proper guidance, all those who enter the UniSwamp are consumed by its devious inhabitants, leaving them rekt.",
              "metadata": {
                "animation_url": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.mp4",
                "attributes": [
                  {
                    "trait_type": "Name",
                    "value": "UniSwamp"
                  },
                  {
                    "trait_type": "Variant",
                    "value": "3D Animated"
                  },
                  {
                    "trait_type": "Rarity",
                    "value": "Epic"
                  },
                  {
                    "display_type": "number",
                    "trait_type": "Vote Power",
                    "value": 5
                  },
                  {
                    "max_value": 50,
                    "trait_type": "Issue",
                    "value": 9
                  }
                ],
                "collection": "EllioTrades",
                "description": "The UniSwamp is ground zero for warfare with The Institution and its army of Shills. Technically, “District 16”, Uniswamp is a region in southwest Cyber City still left unclaimed by the corporations. The de-facto home of the Cyber City underworld, Uniswamp is infested by renegade shills who do anything to turn a quick buck. Without proper guidance, all those who enter the UniSwamp are consumed by its devious inhabitants, leaving them rekt.",
                "groupSize": 50,
                "image": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.png",
                "issue": 9,
                "name": "UniSwamp",
                "type": "video/mp4",
                "video": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.mp4"
              },
              "metadata_url": "https://superfarm-metadata.s3.amazonaws.com/EllioTrades/0000000000000000000000000000000c00000000000000000000000000000009.json",
              "file_url": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.png",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0xafb44cef938b1be600a4331bf9904f6cec2fcac3_t_4083388403051261561560495289181218537481_raw_asset.png",
              "owner_addresses": [
                "0x86872bf79c77cc9f4244d70ede7a8a7a69a6864e"
              ]
            }
          ]
        }
      },
      "Creators": {
        "title": "Creators",
        "required": [
          "account_address",
          "creator_share"
        ],
        "type": "object",
        "properties": {
          "account_address": {
            "title": "Account Address",
            "type": "string",
            "description": "Account address of the creator."
          },
          "creator_share": {
            "title": "Creator Share",
            "type": "integer",
            "description": "Creator share of the NFT (Range: 1-10000 i.e., 0.01%-100%). If an NFT has more than one creator, this tells how the creatorship is shared among the creators."
          }
        },
        "example": {
          "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
          "creator_share": "10000"
        }
      },
      "DeployContractChain": {
        "title": "DeployContractChain",
        "enum": [
          "polygon",
          "rinkeby"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "DeployContractRequest": {
        "title": "DeployContractRequest",
        "required": [
          "chain",
          "contract_name",
          "contract_symbol"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeployContractChain"
              }
            ],
            "description": "Blockchain to deploy the contract to."
          },
          "contract_name": {
            "title": "Contract Name",
            "type": "string",
            "description": "Name of the NFT contract"
          },
          "contract_symbol": {
            "title": "Contract Symbol",
            "type": "string",
            "description": "Symbol of the NFT contract"
          }
        },
        "example": {
          "chain": "polygon",
          "contract_name": "My Cool Token",
          "contract_symbol": "MCT"
        }
      },
      "DeployContractRequestWithAddress": {
        "title": "DeployContractRequestWithAddress",
        "required": [
          "chain",
          "name",
          "symbol",
          "owner_address"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain to deploy the contract to."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT contract."
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Symbol of the NFT contract."
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "The contract owner address. If you wish to own the contract, then set it as your wallet address."
          },
          "type": {
            "title": "Type",
            "enum": [
              "erc721",
              "erc1155"
            ],
            "type": "string",
            "description": "Type of deployed contract (erc721/erc1155). Default type is erc721."
          },
          "metadata_updatable": {
            "title": "Metadata Updatable",
            "type": "boolean",
            "description": "If ```true```, the metadata of the NFTs minted in the specified contract can be updated after minting (token URIs are not frozen on the contract level). This is useful for creating dynamic NFTs or revealing the NFTs after the drop. If ```false```, all the NFTs minted in this contract are frozen by default which means token URIs are non-updatable. Metadata may also be frozen after deploying the contract on a contract and token level (see [Update a deployed contract](https://docs.nftport.xyz/docs/nftport/b3A6MjU2NTIyMTM-update-a-deployed-contract) & [Update a minted NFT](https://docs.nftport.xyz/docs/nftport/b3A6MjU2NTIyMTg-update-a-minted-nft))."
          },
          "base_uri": {
            "title": "Base Uri",
            "type": "string",
            "description": "Optional metadata base URI for tokens. If you specify this, then NFTs minted in this contract will have metadata format of ```base_uri``` + ```metadata_uri```. This is useful for creating dynamic NFTs or revealing the NFTs after the drop. ```base_uri``` can be changed with [Update a deployed contract](https://docs.nftport.xyz/docs/nftport/b3A6MjU2NTIyMTM-update-a-deployed-contract) only if ```metadata_updatable``` is ```true``` and metadata hasn’t been frozen on the contract level. If an NFT’s metadata is frozen on the token level in [Update a minted NFT](https://docs.nftport.xyz/docs/nftport/b3A6MjU2NTIyMTg-update-a-minted-nft) the ```base_uri``` can still be updated."
          }
        },
        "example": {
          "chain": "polygon",
          "name": "CRYPTOPUNKS",
          "symbol": "C",
          "owner_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "type": "erc721"
        }
      },
      "DuplicateNFTResponseModel": {
        "title": "DuplicateNFTResponseModel",
        "required": [
          "contract_address",
          "token_id",
          "chain",
          "similarity"
        ],
        "type": "object",
        "properties": {
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "chain": {
            "title": "Chain",
            "enum": [
              "ethereum",
              "polygon"
            ],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "similarity": {
            "title": "Similarity",
            "type": "number",
            "description": "Similarity of the input image to the NFT (0 to 1)."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "File (image, video, etc) url of the NFT."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          }
        },
        "example": {
          "contract_address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
          "token_id": "3100",
          "chain": "ethereum",
          "similarity": 0.999998,
          "file_url": "https://www.larvalabs.com/cryptopunks/cryptopunk3100.png",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb_t_3100_raw_asset.png",
          "metadata_url": "https://api.niftygateway.com/beeple/100030071/",
          "metadata": {
            "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
            "background_color": "ffffff",
            "external_url": "https://niftygateway.com/#/",
            "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
            "name": "POLITICS IS BULLSHIT #71/100",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
          },
          "mint_date": "2020-10-29T15:03:54.838612"
        }
      },
      "EasyMintNftRequest": {
        "title": "EasyMintNftRequest",
        "required": [
          "chain",
          "name",
          "description",
          "file_url",
          "mint_to_address"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain to mint the NFT on."
          },
          "name": {
            "title": "Name",
            "maxLength": 400,
            "minLength": 1,
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Text description of the NFT which will be seen on NFT marketplaces, etc."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "URL that points to the image/video or any other file format as long as it returns a Content-Length and Content-Type header or contains the file extension. HTML files are not supported."
          },
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFT will be sent. For example, your Metamask wallet address if you wish to send it to yourself."
          }
        },
        "example": {
          "chain": "polygon",
          "name": "Type your NFT name here",
          "description": "Type your NFT description here",
          "file_url": "Add your file URL here",
          "mint_to_address": "Add your wallet address here"
        }
      },
      "GetBatchMintedNftResponse": {
        "title": "GetBatchMintedNftResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain the NFT was minted on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "NFT contract address which has been successfully deployed to the blockchain."
          },
          "token_ids": {
            "title": "Token Ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A unique ```uint256``` IDs list inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0x47c7ff137d7a6644a9a96f1d44f5a6f857d9023f",
          "token_ids": [
            "2"
          ]
        }
      },
      "GetContractNftsRequestInclude": {
        "title": "GetContractNftsRequestInclude",
        "enum": [
          "default",
          "metadata",
          "all"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "GetDeployedContractResponse": {
        "title": "GetDeployedContractResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain where the contract has been created."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "NFT contract address which has been successfully deployed to the blockchain."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Transaction hash generated during the execution of deploying the contract."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "chain": "rinkeby",
          "contract_address": "0x38a554984cf2205f7903123adeb6d560f46625e8",
          "transaction_hash": "0x19ff77a6faebb740168689dfbf0feb63dc4c4b3797235fc8111716f2383e1715"
        }
      },
      "GetMintedNftResponse": {
        "title": "GetMintedNftResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain the NFT was minted on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "NFT contract address which has been successfully deployed to the blockchain."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0x47c7ff137d7a6644a9a96f1d44f5a6f857d9023f",
          "token_id": "2"
        }
      },
      "GetNftsRequestInclude": {
        "title": "GetNftsRequestInclude",
        "enum": [
          "default",
          "metadata",
          "file_information",
          "contract_information",
          "all"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "GetUserProfileContractsResponse": {
        "title": "GetUserProfileContractsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "contracts": {
            "title": "Contracts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserProfileContractDetails"
            },
            "description": "Details of the deployed contracts."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "contracts": [
            {
              "name": "Good Company Tokens",
              "symbol": "GCT",
              "transaction_hash": "0x124141or0f10140112381381dd",
              "chain": "rinkeby",
              "address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
              "owner_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
              "creation_date": "2021-08-23T17:25:03.501703",
              "metadata_frozen": true,
              "type": "erc721"
            }
          ]
        }
      },
      "GetUserProfileSettingsResponse": {
        "title": "GetUserProfileSettingsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "profile": {
            "title": "Profile",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserProfileResponseModel"
              }
            ],
            "description": "Your user profile."
          },
          "subscription_period": {
            "title": "Subscription Period",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSubscriptionPeriodResponseModel"
              }
            ],
            "description": "Your subscription period."
          },
          "nft_data_limits": {
            "title": "Nft Data Limits",
            "allOf": [
              {
                "$ref": "#/components/schemas/NFTDataLimitsResponseModel"
              }
            ],
            "description": "Your NFT Data usage limits."
          },
          "minting_usage_and_limits": {
            "title": "Minting Usage And Limits",
            "allOf": [
              {
                "$ref": "#/components/schemas/MintingAndContractChainResponseModel"
              }
            ],
            "description": "Your minting and contract deployment usage and limits."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "profile": {
            "name": "Satoshi Nakamoto",
            "email": "satoshi@bitcoin.org",
            "joined_date": "2021-10-17T00:00:00+00:00"
          },
          "subscription_period": {
            "start_date": "2022-01-18T12:40:51.519608",
            "end_date": "2022-02-17T12:40:51.519613"
          },
          "nft_data_limits": {
            "nft_data_requests_limit_daily": 5000,
            "nft_data_requests_limit_second": 4
          },
          "minting_usage_and_limits": {
            "polygon": {
              "minting_usage": {
                "total_nfts_minted": 12856,
                "subscription_nfts_minted": 2856
              },
              "minting_limits": {
                "subscription_mints_included": 500
              },
              "contract_deployment_usage": {
                "total_contracts_deployed": 18,
                "subscription_contracts_deployed": 4
              },
              "contract_deployment_limits": {
                "subscription_contracts_included": 15
              }
            },
            "rinkeby": {
              "minting_usage": {
                "total_nfts_minted": 9895,
                "subscription_nfts_minted": 1100
              },
              "minting_limits": {
                "subscription_mints_included": 500
              },
              "contract_deployment_usage": {
                "total_contracts_deployed": 8,
                "subscription_contracts_deployed": 6
              },
              "contract_deployment_limits": {
                "subscription_contracts_included": 15
              }
            }
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "IpfsFileUploadResponse": {
        "title": "IpfsFileUploadResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "ipfs_url": {
            "title": "Ipfs Url",
            "type": "string",
            "description": "IPFS URL of the uploaded file."
          },
          "file_name": {
            "title": "File Name",
            "type": "string",
            "description": "Name of the uploaded file."
          },
          "content_type": {
            "title": "Content Type",
            "type": "string",
            "description": "Content type (MIME type / media type) of the uploaded file (e.g. image/jpeg)."
          },
          "file_size": {
            "title": "File Size",
            "type": "integer",
            "description": "Size of the uploaded file in bytes."
          },
          "file_size_mb": {
            "title": "File Size Mb",
            "type": "number",
            "description": "Size of the uploaded file in MB."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "ipfs_url": "https://ipfs.io/ipfs/QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ",
          "file_name": "name.jpeg",
          "content_type": "image/jpeg",
          "file_size": 85138,
          "file_size_mb": 0.0812
        }
      },
      "Listings": {
        "title": "Listings",
        "required": [
          "type",
          "lister_address",
          "nft",
          "price_details",
          "transaction_date"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": [
              "list",
              "cancel_list"
            ],
            "type": "string",
            "description": "Activity type."
          },
          "lister_address": {
            "title": "Lister Address",
            "type": "string",
            "description": "Account address of the lister."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__transactions__entities__Nft"
              }
            ],
            "description": "Details of the listed NFT."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFTs listed (can be more than 1 NFT for ERC1155)."
          },
          "price_details": {
            "title": "Price Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceDetails"
              }
            ],
            "description": "Price details of the listing."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "block_hash": {
            "title": "Block Hash",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "block_number": {
            "title": "Block Number",
            "type": "integer",
            "description": "Number of the block in which the transaction is recorded"
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          },
          "marketplace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Marketplace"
              }
            ],
            "description": "Marketplace where the NFT was listed."
          }
        },
        "example": {
          "type": "list",
          "lister_address": "0xb4cdc8dfd9ce9bf647f38cd8278036c0aacdc91e",
          "nft": {
            "contract_type": "ERC1155_lazy",
            "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
            "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
            "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
            "creators": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "creator_share": "10000"
              }
            ],
            "royalties": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "royalty_share": "1000"
              }
            ],
            "signatures": [
              "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
            ],
            "total": 5000
          },
          "quantity": 1,
          "listing_details": {
            "asset_type": "ERC20",
            "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
            "price": "0.071",
            "price_usd": 271.5
          },
          "transaction_date": "2021-12-03T01:28:55.961",
          "marketplace": "opensea"
        }
      },
      "Marketplace": {
        "title": "Marketplace",
        "enum": [
          "opensea",
          "rarible"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "MetadataAttribute": {
        "title": "MetadataAttribute",
        "required": [
          "trait_type",
          "value"
        ],
        "type": "object",
        "properties": {
          "trait_type": {
            "title": "Trait Type",
            "type": "string",
            "description": "Trait name."
          },
          "value": {
            "title": "String or numeric value of the attribute.",
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ]
          },
          "max_value": {
            "title": "Max Value",
            "type": "integer",
            "description": "Maximum value for a numeric value."
          },
          "display_type": {
            "title": "Display Type",
            "enum": [
              "boost_number",
              "boost_percentage",
              "number",
              "date"
            ],
            "type": "string",
            "description": "Display type of the attribute (None for string values)."
          }
        }
      },
      "MintBatchNftRequest": {
        "title": "MintBatchNftRequest",
        "required": [
          "chain",
          "contract_address",
          "tokens"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain where to mint the NFT."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The NFT will be minted inside this contract. It must be your own contract. If you don’t have one, see [Deploy an NFT contract](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzU-deploy-an-nft-contract)."
          },
          "tokens": {
            "title": "Tokens",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MintBatchTokenItem"
            },
            "description": "List of tokens to be minted. Each record contains mint_to_address, token ID, metadata_uri and quantity. Maximum length is 50."
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "tokens": [
            {
              "mint_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
              "token_id": "123",
              "metadata_uri": "ipfs://QmTz7dGHvXghNuh3V64QBwHPXva4chpMR7frpfxCaxvhd4",
              "quantity": "1"
            }
          ]
        }
      },
      "MintBatchResponse": {
        "title": "MintBatchResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain the NFTs were minted on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address where the NFT were minted."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after minting."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "tokens": {
            "title": "Tokens",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MintBatchTokenResponseItem"
            },
            "description": "List of minted tokens."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "transaction_hash": "0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "transaction_external_url": "https://polygonscan.com/tx/0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "tokens": [
            {
              "mint_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
              "token_id": "123",
              "metadata_uri": "ipfs://QmTz7dGHvXghNuh3V64QBwHPXva4chpMR7frpfxCaxvhd4",
              "quantity": "1"
            }
          ]
        }
      },
      "MintBatchTokenItem": {
        "title": "MintBatchTokenItem",
        "required": [
          "mint_to_address",
          "token_id",
          "metadata_uri",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFTs will be sent. For example, your Metamask wallet address if you wish to send them to yourself."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "Customizable token ID for the NFTs. Maximum length is 76 digit number (2^256 - 1)."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "minLength": 1,
            "type": "string",
            "description": "Metadata URI which will be linked with your NFTs. If you don't have one, see [Upload metadata to IPFS](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzc-upload-metadata-to-ipfs)."
          },
          "quantity": {
            "title": "Quantity",
            "type": "string",
            "description": "The quantity of the NFTs. Maximum quantity is 76 digit integer (2^256 - 1)"
          }
        }
      },
      "MintBatchTokenResponseItem": {
        "title": "MintBatchTokenResponseItem",
        "required": [
          "mint_to_address",
          "token_id",
          "metadata_uri",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFTs were minted."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "Token ID of the NFTs."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "type": "string",
            "description": "Metadata URI linked with the NFTs."
          },
          "quantity": {
            "title": "Quantity",
            "type": "string",
            "description": "The quantity of the NFTs."
          }
        }
      },
      "MintNftRequest": {
        "title": "MintNftRequest",
        "required": [
          "chain",
          "contract_address",
          "metadata_uri",
          "mint_to_address"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain where to mint the NFT."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The NFT will be minted inside this contract. It must be your own contract. If you don’t have one, see [Deploy an NFT contract](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzU-deploy-an-nft-contract)."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "minLength": 1,
            "type": "string",
            "description": "Metadata URI which will be linked with your NFT. If you don't have one, see [Upload metadata to IPFS](https://docs.nftport.xyz/docs/nftport/b3A6MjE0MDYzNzc-upload-metadata-to-ipfs)."
          },
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFT will be sent. For example, your Metamask wallet address if you wish to send it to yourself."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "Customizable token ID for the NFT. Maximum length is 76 digit number (2^256 - 1)."
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "metadata_uri": "ipfs://QmTz7dGHvXghNuh3V64QBwHPXva4chpMR7frpfxCaxvhd4",
          "mint_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42"
        }
      },
      "MintNftRequestChain": {
        "title": "MintNftRequestChain",
        "enum": [
          "polygon",
          "rinkeby"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "MintNftResponse": {
        "title": "MintNftResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain the NFT was minted on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address where the NFT was minted."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after minting."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "type": "string",
            "description": "Metadata URI linked with the NFT."
          },
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFT was sent."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "transaction_hash": "0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "transaction_external_url": "https://polygonscan.com/tx/0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "metadata_uri": "ipfs://QmTz7dGHvXghNuh3V64QBwHPXva4chpMR7frpfxCaxvhd4",
          "mint_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42"
        }
      },
      "MintNftWithUploadResponse": {
        "title": "MintNftWithUploadResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain the NFT was minted on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address where the NFT was minted."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after minting."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFT was sent."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0x47c7ff137d7a6644a9a96f1d44f5a6f857d9023f",
          "transaction_hash": "0x6eb71286f4875bf48be7834c1ff285910583705714f5a5acff67489f94e14954",
          "transaction_external_url": "https://polygonscan.com/tx/0x6eb71286f4875bf48be7834c1ff285910583705714f5a5acff67489f94e14954",
          "mint_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "name": "NFTPort.xyz",
          "description": "One-Stop & Simple NFT Infrastructure & APIs for Developers"
        }
      },
      "MintingAndContractChainResponseModel": {
        "title": "MintingAndContractChainResponseModel",
        "required": [
          "polygon",
          "rinkeby"
        ],
        "type": "object",
        "properties": {
          "polygon": {
            "title": "Polygon",
            "allOf": [
              {
                "$ref": "#/components/schemas/MintingUsageAndLimitsResponseModel"
              }
            ],
            "description": "Your minting and contract deployment usage and limits on Polygon."
          },
          "rinkeby": {
            "title": "Rinkeby",
            "allOf": [
              {
                "$ref": "#/components/schemas/MintingUsageAndLimitsResponseModel"
              }
            ],
            "description": "Your minting and contract deployment usage and limits on Rinkeby."
          }
        }
      },
      "MintingUsageAndLimitsResponseModel": {
        "title": "MintingUsageAndLimitsResponseModel",
        "type": "object",
        "properties": {
          "minting_usage": {
            "title": "Minting Usage",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserMintingUsageResponseModel"
              }
            ],
            "description": "Your minting usage."
          },
          "minting_limits": {
            "title": "Minting Limits",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserMintingLimitsResponseModel"
              }
            ],
            "description": "Your minting limits."
          },
          "contract_deployment_usage": {
            "title": "Contract Deployment Usage",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserContractUsageResponseModel"
              }
            ],
            "description": "Your contract deployment usage."
          },
          "contract_deployment_limits": {
            "title": "Contract Deployment Limits",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserContractLimitsResponseModel"
              }
            ],
            "description": "Your contract deployment limits."
          }
        }
      },
      "NFTDataLimitsResponseModel": {
        "title": "NFTDataLimitsResponseModel",
        "required": [
          "nft_data_requests_limit_daily",
          "nft_data_requests_limit_second"
        ],
        "type": "object",
        "properties": {
          "nft_data_requests_limit_daily": {
            "title": "Nft Data Requests Limit Daily",
            "type": "integer",
            "description": "Number of requests allowed per day."
          },
          "nft_data_requests_limit_second": {
            "title": "Nft Data Requests Limit Second",
            "type": "integer",
            "description": "Number of requests allowed per second."
          }
        }
      },
      "NftAssetMetadata": {
        "title": "NftAssetMetadata",
        "required": [
          "height",
          "width",
          "file_size"
        ],
        "type": "object",
        "properties": {
          "height": {
            "title": "Height",
            "type": "integer",
            "description": "Image height in pixels."
          },
          "width": {
            "title": "Width",
            "type": "integer",
            "description": "Image width in pixels."
          },
          "file_size": {
            "title": "File Size",
            "type": "integer",
            "description": "File size in bytes."
          }
        },
        "example": {
          "height": 512,
          "width": 512,
          "file_size": 310751
        }
      },
      "NftsRequestChain": {
        "title": "NftsRequestChain",
        "enum": [
          "ethereum",
          "rinkeby",
          "polygon",
          "tezos"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NftsRequestSupportedChain": {
        "title": "NftsRequestSupportedChain",
        "enum": [
          "ethereum",
          "polygon"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NftsResponse": {
        "title": "NftsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/src__service__nfts__entities__Nft"
            },
            "description": "Details of the NFTs."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for next page."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "chain": "ethereum",
              "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
              "token_id": "100030071",
              "contract": {
                "name": "Decentraland LAND",
                "symbol": "LAND",
                "type": "ERC721"
              },
              "metadata": {
                "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
                "background_color": "ffffff",
                "external_url": "https://niftygateway.com/#/",
                "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
                "name": "POLITICS IS BULLSHIT #71/100",
                "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
              },
              "metadata_url": "https://api.niftygateway.com/beeple/100030071",
              "file_url": "https://lh3.googleusercontent.com/79JB1V9gSMv83iMs-Db4qdpPVdpKiyt_sjGLgs575wLEgWjSRLCzMQMoxaealYz7AVCKY_mzSy6GlOYdGt_7aaCZfg",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
              "mint_date": "2020-10-29T15:03:54.838612",
              "file_information": {
                "height": 512,
                "width": 512,
                "file_size": 310751
              },
              "updated_date": "2021-10-19T15:03:54.838612"
            }
          ],
          "continuation": "MHg0Zjg5Y2QwY2FlMWU1NGQ5OGRiNmE4MDE1MGE4MjRhNTMzNTAyZWVhXzI0MzU="
        }
      },
      "PriceDetails": {
        "title": "PriceDetails",
        "type": "object",
        "properties": {
          "asset_type": {
            "title": "Asset Type",
            "enum": [
              "ETH",
              "ERC20"
            ],
            "type": "string",
            "description": "Type of the asset the NFT is traded for."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract address (for `ERC20`)."
          },
          "price": {
            "title": "Price",
            "type": "number",
            "description": "Price in `asset_type`- `ETH` or `ERC20`."
          },
          "price_usd": {
            "title": "Price Usd",
            "type": "number",
            "description": "Price in USD."
          }
        },
        "example": {
          "asset_type": "ERC20",
          "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
          "price": "0.071",
          "price_usd": 271.5
        }
      },
      "Royalties": {
        "title": "Royalties",
        "required": [
          "account_address",
          "royalty_share"
        ],
        "type": "object",
        "properties": {
          "account_address": {
            "title": "Account Address",
            "type": "string",
            "description": "Account address where royalty is paid."
          },
          "royalty_share": {
            "title": "Royalty Share",
            "type": "integer",
            "description": "Royalty share (Range: 1-100000 i.e., 0.01%-100%)."
          }
        },
        "example": {
          "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
          "royalty_share": "1000"
        }
      },
      "Sales": {
        "title": "Sales",
        "required": [
          "type",
          "buyer_address",
          "seller_address",
          "nft",
          "price_details",
          "transaction_hash",
          "block_hash",
          "block_number",
          "transaction_date"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": [
              "sale"
            ],
            "type": "string",
            "description": "Activity type."
          },
          "buyer_address": {
            "title": "Buyer Address",
            "type": "string",
            "description": "Account address of the buyer."
          },
          "seller_address": {
            "title": "Seller Address",
            "type": "string",
            "description": "Account address of the seller."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__transactions__entities__Nft"
              }
            ],
            "description": "Details of the sold NFT."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFT units (can be more than 1 NFT for ERC1155)."
          },
          "price_details": {
            "title": "Price Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceDetails"
              }
            ],
            "description": "Price details of the sale."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "block_hash": {
            "title": "Block Hash",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "block_number": {
            "title": "Block Number",
            "type": "integer",
            "description": "Number of the block in which the transaction is recorded."
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          },
          "marketplace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Marketplace"
              }
            ],
            "description": "Marketplace where the sale took place."
          }
        },
        "example": {
          "type": "sale",
          "buyer_address": "0xc2d131a52a7bc75f6558588d010d649e02710115",
          "seller_address": "0xc2d131a52a7bc75f6558588d010d649e02710115",
          "nft": {
            "contract_type": "ERC1155_lazy",
            "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
            "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
            "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
            "creators": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "creator_share": "10000"
              }
            ],
            "royalties": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "royalty_share": "1000"
              }
            ],
            "signatures": [
              "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
            ],
            "total": 5000
          },
          "quantity": 1,
          "price_details": {
            "asset_type": "ERC20",
            "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
            "price": "0.071",
            "price_usd": 271.5
          },
          "transaction_hash": "0x1c3b3e05961e5010e1b13d60a550ee9e14f9f3ef99a4d81e266b2b2067d6df87",
          "block_hash": "0x8ad765098c04fa1b566b35848e951e99257a161a50a8732f06aef393f4e18dae",
          "block_number": 13733126,
          "transaction_date": "2021-12-03T10:37:41",
          "marketplace": "opensea"
        }
      },
      "SearchRequest": {
        "title": "SearchRequest",
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "query": {
            "title": "Query",
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Search query"
          },
          "page_number": {
            "title": "Page Number",
            "minimum": 1,
            "type": "integer",
            "description": "The page number of the results to return. The first page is 1.",
            "default": 1
          },
          "page_size": {
            "title": "Page Size",
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "default": 50
          }
        },
        "example": {
          "query": "dog"
        }
      },
      "TextSearchRequestChain": {
        "title": "TextSearchRequestChain",
        "enum": [
          "ethereum",
          "polygon",
          "all-chains"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TextSearchRequestOrder": {
        "title": "TextSearchRequestOrder",
        "enum": [
          "relevance",
          "mint_date"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TextSearchRequestSortOrder": {
        "title": "TextSearchRequestSortOrder",
        "enum": [
          "desc",
          "asc"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TransactionsByAccountResponse": {
        "title": "TransactionsByAccountResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Transfers"
                },
                {
                  "$ref": "#/components/schemas/Sales"
                },
                {
                  "$ref": "#/components/schemas/Bids"
                },
                {
                  "$ref": "#/components/schemas/Listings"
                }
              ]
            },
            "description": "Transactions data."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation string."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "transactions": {
            "type": "sale",
            "buyer_address": "0xc2d131a52a7bc75f6558588d010d649e02710115",
            "seller_address": "0xc2d131a52a7bc75f6558588d010d649e02710115",
            "nft": {
              "contract_type": "ERC1155_lazy",
              "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
              "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
              "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
              "creators": [
                {
                  "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                  "creator_share": "10000"
                }
              ],
              "royalties": [
                {
                  "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                  "royalty_share": "1000"
                }
              ],
              "signatures": [
                "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
              ],
              "total": 5000
            },
            "quantity": 1,
            "price_details": {
              "asset_type": "ERC20",
              "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
              "price": "0.071",
              "price_usd": 271.5
            },
            "transaction_hash": "0x1c3b3e05961e5010e1b13d60a550ee9e14f9f3ef99a4d81e266b2b2067d6df87",
            "block_hash": "0x8ad765098c04fa1b566b35848e951e99257a161a50a8732f06aef393f4e18dae",
            "block_number": 13733126,
            "transaction_date": "2021-12-03T10:37:41",
            "marketplace": "opensea"
          },
          "continuation": "1638479526000_61a936bd60c2ce3a0c68cd6f"
        }
      },
      "TransactionsByContractResponse": {
        "title": "TransactionsByContractResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Transfers"
                },
                {
                  "$ref": "#/components/schemas/Sales"
                },
                {
                  "$ref": "#/components/schemas/Bids"
                },
                {
                  "$ref": "#/components/schemas/Listings"
                }
              ]
            },
            "description": "Transactions data."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation string."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "transactions": {
            "type": "transfer",
            "transfer_from": "0xaf8acfa2d093a3569f9b1a2fd3c596d3b5d8f69d",
            "transfer_to": "0xa42f6807522e4c786835e253c0735f130e58aa9d",
            "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
            "token_id": "79400006447981872162108805936960249632419041130515543620398493819452073705492",
            "quantity": 1,
            "transaction_hash": "0x117cce93c9f67a19273f53caf6cba46485f9be03c04d0131b1df0f15ce005c90",
            "block_hash": "0x80907f3c8bcaa5bc313b2c4114750aa38d255e740427404cefb99c231ebf9fe5",
            "block_number": 13732674,
            "transaction_date": "2021-12-03T09:00:46"
          },
          "continuation": "1638479526000_61a936bd60c2ce3a0c68cd6f"
        }
      },
      "TransactionsByTokenResponse": {
        "title": "TransactionsByTokenResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Transfers"
                },
                {
                  "$ref": "#/components/schemas/Sales"
                },
                {
                  "$ref": "#/components/schemas/Bids"
                },
                {
                  "$ref": "#/components/schemas/Listings"
                }
              ]
            },
            "description": "Transactions data."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation string."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "transactions": {
            "type": "list",
            "lister_address": "0xb4cdc8dfd9ce9bf647f38cd8278036c0aacdc91e",
            "nft": {
              "contract_type": "ERC1155_lazy",
              "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
              "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
              "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
              "creators": [
                {
                  "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                  "creator_share": "10000"
                }
              ],
              "royalties": [
                {
                  "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                  "royalty_share": "1000"
                }
              ],
              "signatures": [
                "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
              ],
              "total": 5000
            },
            "quantity": 1,
            "listing_details": {
              "asset_type": "ERC20",
              "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
              "price": "0.071",
              "price_usd": 271.5
            },
            "transaction_date": "2021-12-03T01:28:55.961",
            "marketplace": "opensea"
          },
          "continuation": "1638479526000_61a936bd60c2ce3a0c68cd6f"
        }
      },
      "Transfers": {
        "title": "Transfers",
        "required": [
          "type",
          "contract_address",
          "token_id",
          "quantity",
          "transaction_hash",
          "block_hash",
          "block_number",
          "transaction_date"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": [
              "transfer",
              "mint",
              "burn"
            ],
            "type": "string",
            "description": "Activity type."
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "NFT owner i.e. account address (for `type`- `mint` and `burn`)."
          },
          "transfer_from": {
            "title": "Transfer From",
            "type": "string",
            "description": "Account address the NFT was transferred from (for `type`- `transfer`)."
          },
          "transfer_to": {
            "title": "Transfer To",
            "type": "string",
            "description": "Account address the NFT was transferred to (for `type`- `transfer`)."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique `uint256` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFTs transferred (can be more than 1 NFT for ERC1155)."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "block_hash": {
            "title": "Block Hash",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "block_number": {
            "title": "Block Number",
            "type": "integer",
            "description": "Number of the block in which the transaction is recorded."
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          }
        },
        "example": {
          "type": "transfer",
          "transfer_from": "0xaf8acfa2d093a3569f9b1a2fd3c596d3b5d8f69d",
          "transfer_to": "0xa42f6807522e4c786835e253c0735f130e58aa9d",
          "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
          "token_id": "79400006447981872162108805936960249632419041130515543620398493819452073705492",
          "quantity": 1,
          "transaction_hash": "0x117cce93c9f67a19273f53caf6cba46485f9be03c04d0131b1df0f15ce005c90",
          "block_hash": "0x80907f3c8bcaa5bc313b2c4114750aa38d255e740427404cefb99c231ebf9fe5",
          "block_number": 13732674,
          "transaction_date": "2021-12-03T09:00:46"
        }
      },
      "UpdateContractRequest": {
        "title": "UpdateContractRequest",
        "required": [
          "chain",
          "contract_address"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain where the contract was deployed to."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Address of the NFT contract."
          },
          "freeze_metadata": {
            "title": "Freeze Metadata",
            "type": "boolean",
            "description": "If ```true```, freezes all token URIs inside the specified contract."
          },
          "base_uri": {
            "title": "Base Uri",
            "type": "string",
            "description": "Metadata base URI for tokens. Can only be changed if you deployed your contract with ```metadata_updatable``` as ```true``` and metadata hasn’t been frozen. If tokens are frozen separately in [Update a minted NFT](https://docs.nftport.xyz/docs/nftport/b3A6MjU2NTIyMTg-update-a-minted-nft) the ```base_uri``` can still be updated."
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "freeze_metadata": true
        }
      },
      "UpdateContractResponse": {
        "title": "UpdateContractResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain where the contract has been created."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Transaction hash which is a unique string of characters that is given to every transaction that is added to the blockchain."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "freeze_metadata": {
            "title": "Freeze Metadata",
            "type": "boolean",
            "description": "If ```true```, all token URIs inside the contract are frozen."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "transaction_hash": "0x773ea27408d521898aaf20067e6b8e252b6aa5f0067878da6e2f22fe6fe3eee8",
          "transaction_external_url": "https://polygonscan.com/tx/0xb1ffb9907e4b72cd89b81e00c4c233d1cc7c661f96f65979048eb6332deb467e",
          "freeze_metadata": true
        }
      },
      "UpdateNftRequest": {
        "title": "UpdateNftRequest",
        "required": [
          "chain",
          "contract_address",
          "token_id"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain where NFT is minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract where token is minted. It must be your own contract. If you don’t have one, see Deploy an NFT contract."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "Customizable token ID for the NFT. Maximum length is 76 digit number (2^256 - 1)."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "type": "string",
            "description": "Token URI for update."
          },
          "freeze_metadata": {
            "title": "Freeze Metadata",
            "type": "boolean",
            "description": "If ```true```, freezes the specified NFT token URI and further token metadata updates are blocked. You can still change the ```base_uri``` on contract level with [Update a deployed contract](https://docs.nftport.xyz/docs/nftport/b3A6MjU2NTIyMTM-update-a-deployed-contract). If you wish to freeze all updates, then set ```freeze_metadata``` as ```true``` in Update a deployed contract."
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "token_id": "1",
          "metadata_uri": "ipfs://QmTz7dGHvXghNuh3V64QBwHPXva4chpMR7frpfxCaxvhd4"
        }
      },
      "UpdateNftResponse": {
        "title": "UpdateNftResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain the NFT was updated on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address where the NFT was updated."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after minting."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "type": "string",
            "description": "Uploaded metadata URI (also known as token URI)."
          },
          "freeze_metadata": {
            "title": "Freeze Metadata",
            "type": "boolean",
            "description": "If ```true```, further URI updates will be blocked."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "transaction_hash": "0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "transaction_external_url": "https://polygonscan.com/tx/0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "token_id": "1",
          "token_uri": "ipfs://QmTz7dGHvXghNuh3V64QBwHPXva4chpMR7frpfxCaxvhd4",
          "freeze_metadata": false
        }
      },
      "UserContractLimitsResponseModel": {
        "title": "UserContractLimitsResponseModel",
        "type": "object",
        "properties": {
          "subscription_contracts_included": {
            "title": "Subscription Contracts Included",
            "type": "integer",
            "description": "Contract deployments included in your subscription."
          },
          "max_contracts": {
            "title": "Max Contracts",
            "type": "integer",
            "description": "Contract deployment limit."
          }
        }
      },
      "UserContractUsageResponseModel": {
        "title": "UserContractUsageResponseModel",
        "required": [
          "total_contracts_deployed"
        ],
        "type": "object",
        "properties": {
          "total_contracts_deployed": {
            "title": "Total Contracts Deployed",
            "type": "integer",
            "description": "Total number of contracts deployed."
          },
          "subscription_contracts_deployed": {
            "title": "Subscription Contracts Deployed",
            "type": "integer",
            "description": "Number of contracts deployed during your current subscription cycle."
          }
        }
      },
      "UserMintingLimitsResponseModel": {
        "title": "UserMintingLimitsResponseModel",
        "type": "object",
        "properties": {
          "subscription_mints_included": {
            "title": "Subscription Mints Included",
            "type": "integer",
            "description": "Mints included in your subscription."
          },
          "max_mints": {
            "title": "Max Mints",
            "type": "integer",
            "description": "Minting limit."
          }
        }
      },
      "UserMintingUsageResponseModel": {
        "title": "UserMintingUsageResponseModel",
        "required": [
          "total_nfts_minted"
        ],
        "type": "object",
        "properties": {
          "total_nfts_minted": {
            "title": "Total Nfts Minted",
            "type": "integer",
            "description": "Total number of NFTs minted."
          },
          "subscription_nfts_minted": {
            "title": "Subscription Nfts Minted",
            "type": "integer",
            "description": "Number of NFTs minted during your current subscription cycle."
          }
        }
      },
      "UserProfileContractDetails": {
        "title": "UserProfileContractDetails",
        "required": [
          "name",
          "symbol",
          "transaction_hash",
          "chain",
          "address",
          "creation_date",
          "metadata_frozen",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Contract name."
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Contract symbol."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Deployed contract transaction hash which is a unique string of characters that is given to every transaction that is added to the blockchain."
          },
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain where the contract has been created."
          },
          "address": {
            "title": "Address",
            "type": "string",
            "description": "NFT contract address which has been successfully deployed to the blockchain."
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "Owner address of the deployed NFT contract."
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "description": "Date when the contract was created (ISO)."
          },
          "metadata_frozen": {
            "title": "Metadata Frozen",
            "type": "boolean",
            "description": "If ```true``` than the metadata URIs of the tokens can't be changed."
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Contract type (erc721 or erc1155)."
          }
        },
        "example": {
          "name": "Good Company Tokens",
          "symbol": "GCT",
          "transaction_hash": "0x124141or0f10140112381381dd",
          "chain": "rinkeby",
          "address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "owner_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "creation_date": "2021-08-23T17:25:03.501703",
          "metadata_frozen": true,
          "type": "erc721"
        }
      },
      "UserProfileResponseModel": {
        "title": "UserProfileResponseModel",
        "required": [
          "name",
          "email",
          "joined_date"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Your name."
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Your email ID."
          },
          "joined_date": {
            "title": "Joined Date",
            "type": "string",
            "description": "Date when you signed up (ISO)."
          }
        }
      },
      "UserSubscriptionPeriodResponseModel": {
        "title": "UserSubscriptionPeriodResponseModel",
        "required": [
          "start_date",
          "end_date"
        ],
        "type": "object",
        "properties": {
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "description": "Date when your subscription started (ISO)."
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "description": "Date when your subscription will end (ISO)."
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "src__service__account__deprecated__entities__AccountNft": {
        "title": "AccountNft",
        "required": [
          "contract_address",
          "token_id"
        ],
        "type": "object",
        "properties": {
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT."
          },
          "asset_url": {
            "title": "Asset Url",
            "type": "string",
            "description": "NFT file URL where it is hosted."
          },
          "creator_address": {
            "title": "Creator Address",
            "type": "string",
            "description": "NFT creator address."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "NFT metadata downloaded and parsed from the contract token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          }
        },
        "example": {
          "contract_address": "KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton",
          "token_id": "159383",
          "name": "Cool name",
          "description": "Cool description",
          "asset_url": "ipfs://QmVkyU2c6ade8su1UKqSSx6iNLDp6zrCMUGX8DrRFcm9mq",
          "creator_address": "tz1dVxdJwpJixh6Kcd5FZULTfFcR98V7Z2fw",
          "metadata": {
            "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
            "background_color": "ffffff",
            "external_url": "https://niftygateway.com/#/",
            "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
            "name": "POLITICS IS BULLSHIT #71/100",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
          }
        }
      },
      "src__service__account__deprecated__entities__AccountNftsResponse": {
        "title": "AccountNftsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/src__service__account__deprecated__entities__AccountNft"
            }
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of NFTs owned by the address."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for next page.",
            "default": ""
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "contract_address": "KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton",
              "token_id": "159383",
              "name": "Cool name",
              "description": "Cool description",
              "asset_url": "ipfs://QmVkyU2c6ade8su1UKqSSx6iNLDp6zrCMUGX8DrRFcm9mq",
              "creator_address": "tz1dVxdJwpJixh6Kcd5FZULTfFcR98V7Z2fw",
              "metadata": {
                "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
                "background_color": "ffffff",
                "external_url": "https://niftygateway.com/#/",
                "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
                "name": "POLITICS IS BULLSHIT #71/100",
                "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
              }
            }
          ],
          "total": 12
        }
      },
      "src__service__account__entities__AccountNft": {
        "title": "AccountNft",
        "required": [
          "contract_address",
          "token_id"
        ],
        "type": "object",
        "properties": {
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "File (image, video, etc) URL of the NFT."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "creator_address": {
            "title": "Creator Address",
            "type": "string",
            "description": "NFT creator address."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          }
        },
        "example": {
          "contract_address": "KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton",
          "token_id": "159383",
          "name": "Cool name",
          "description": "Cool description",
          "file_url": "ipfs://QmVkyU2c6ade8su1UKqSSx6iNLDp6zrCMUGX8DrRFcm9mq",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
          "creator_address": "tz1dVxdJwpJixh6Kcd5FZULTfFcR98V7Z2fw",
          "metadata": {
            "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
            "background_color": "ffffff",
            "external_url": "https://niftygateway.com/#/",
            "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
            "name": "POLITICS IS BULLSHIT #71/100",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
          },
          "metadata_url": "https://api.niftygateway.com/beeple/100030071"
        }
      },
      "src__service__account__entities__AccountNftsResponse": {
        "title": "AccountNftsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/src__service__account__entities__AccountNft"
            }
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of NFTs owned by the address."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for next page.",
            "default": ""
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "contract_address": "KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton",
              "token_id": "159383",
              "name": "Cool name",
              "description": "Cool description",
              "file_url": "ipfs://QmVkyU2c6ade8su1UKqSSx6iNLDp6zrCMUGX8DrRFcm9mq",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
              "creator_address": "tz1dVxdJwpJixh6Kcd5FZULTfFcR98V7Z2fw",
              "metadata": {
                "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
                "background_color": "ffffff",
                "external_url": "https://niftygateway.com/#/",
                "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
                "name": "POLITICS IS BULLSHIT #71/100",
                "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
              },
              "metadata_url": "https://api.niftygateway.com/beeple/100030071"
            }
          ],
          "total": 12
        }
      },
      "src__service__contract__deprecated__entities__DeployContractResponse": {
        "title": "DeployContractResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeployContractChain"
              }
            ],
            "description": "The blockchain where the NFT has been minted."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Deployed contract transaction hash which is a unique string of characters that is given to every transaction that is added to the blockchain."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "contract_name": {
            "title": "Contract Name",
            "type": "string",
            "description": "Name of the deployed NFT contract"
          },
          "contract_symbol": {
            "title": "Contract Symbol",
            "type": "string",
            "description": "Symbol of the deployed NFT contract"
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error"
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "transaction_hash": "0x773ea27408d521898aaf20067e6b8e252b6aa5f0067878da6e2f22fe6fe3eee8",
          "transaction_external_url": "https://polygonscan.com/tx/0xb1ffb9907e4b72cd89b81e00c4c233d1cc7c661f96f65979048eb6332deb467e",
          "contract_name": "NFTPort.xyz",
          "contract_symbol": "NFTP"
        }
      },
      "src__service__contract__entities__DeployContractResponse": {
        "title": "DeployContractResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain where the contract has been created."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Deployed contract transaction hash which is a unique string of characters that is given to every transaction that is added to the blockchain."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "Owner address of the deployed NFT contract."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the deployed NFT contract."
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Symbol of the deployed NFT contract."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "transaction_hash": "0x773ea27408d521898aaf20067e6b8e252b6aa5f0067878da6e2f22fe6fe3eee8",
          "transaction_external_url": "https://polygonscan.com/tx/0xb1ffb9907e4b72cd89b81e00c4c233d1cc7c661f96f65979048eb6332deb467e",
          "name": "CRYPTOPUNKS",
          "symbol": "C",
          "owner_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42"
        }
      },
      "src__service__minting__deprecated__entities__GetUserProfileMintedNftsResponse": {
        "title": "GetUserProfileMintedNftsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of NFTs minted."
          },
          "minted_nfts": {
            "title": "Minted Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/src__service__minting__deprecated__entities__UserMintedNftResponse"
            },
            "description": "User minted NFTs"
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        }
      },
      "src__service__minting__deprecated__entities__IpfsMetadataUploadRequest": {
        "title": "IpfsMetadataUploadRequest",
        "required": [
          "name",
          "description",
          "file_uri"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 400,
            "minLength": 1,
            "type": "string",
            "description": "Name of NFT."
          },
          "description": {
            "title": "Description",
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Description of NFT."
          },
          "file_uri": {
            "title": "File Uri",
            "minLength": 1,
            "type": "string",
            "description": "URL of the file that you wish to link with the metadata and turn into an NFT."
          },
          "attributes": {
            "title": "Attributes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataAttribute"
            },
            "description": "Optional list of NFT attributes."
          }
        },
        "example": {
          "name": "My Art",
          "description": "This is my custom art piece",
          "file_uri": "https://ipfs.io/ipfs/QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ",
          "attributes": [
            {
              "trait_type": "Base",
              "value": "Blue drawing"
            },
            {
              "trait_type": "Style",
              "value": "Lines"
            },
            {
              "trait_type": "Level",
              "value": 3,
              "max_value": 10
            },
            {
              "trait_type": "Coolness",
              "value": 1.8,
              "max_value": 2
            },
            {
              "display_type": "boost_number",
              "trait_type": "Spiciness",
              "value": 37
            },
            {
              "display_type": "boost_percentage",
              "trait_type": "Epicness",
              "value": 11
            },
            {
              "display_type": "number",
              "trait_type": "Generation",
              "value": 3
            }
          ]
        }
      },
      "src__service__minting__deprecated__entities__IpfsMetadataUploadResponse": {
        "title": "IpfsMetadataUploadResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "metadata_ipfs_uri": {
            "title": "Metadata Ipfs Uri",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "metadata_ipfs_uri": "ipfs://QmTz7dGHvXghNuh3V64QBwHPXva4chpMR7frpfxCaxvhd4"
        }
      },
      "src__service__minting__deprecated__entities__UserMintedNftResponse": {
        "title": "UserMintedNftResponse",
        "required": [
          "chain",
          "transaction_hash",
          "contract_name",
          "minted_address",
          "minted_date"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NftsRequestChain"
              }
            ],
            "description": "Chain the NFT was minted on."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "NFT minting transaction hash."
          },
          "contract_name": {
            "title": "Contract Name",
            "type": "string",
            "description": "Contract name of the minted NFT."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract address of the minted NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "Token ID of the minted NFT."
          },
          "minted_address": {
            "title": "Minted Address",
            "type": "string",
            "description": "Address where the NFT was minted."
          },
          "metadata_ipfs_uri": {
            "title": "Metadata Ipfs Uri",
            "type": "string",
            "description": "Metadata IPFS URI"
          },
          "minted_date": {
            "title": "Minted Date",
            "type": "string",
            "description": "Date when the NFT was minted (UTC)."
          }
        },
        "example": {
          "chain": "polygon",
          "transaction_hash": "0x124141or0f10140112381381dd",
          "contract_name": "My NFTPort contract",
          "contract_address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
          "token_id": "6473",
          "minted_address": "0xc155f9bd6b71e9f71d0236b689ad7c2c5d16febf",
          "metadata_ipfs_uri": "ipfs://QmTz7dGHvXghNuh3V64QBwHPXva4chpMR7frpfxCaxvhd4",
          "minted_date": "2021-08-23T17:25:03.501703"
        }
      },
      "src__service__minting__entities__GetUserProfileMintedNftsResponse": {
        "title": "GetUserProfileMintedNftsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of NFTs minted."
          },
          "minted_nfts": {
            "title": "Minted Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/src__service__minting__entities__UserMintedNftResponse"
            },
            "description": "Details of the NFTs minted by you."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "total": 1,
          "minted_nfts": [
            {
              "chain": "polygon",
              "transaction_hash": "0x124141or0f10140112381381dd",
              "contract_name": "My NFTPort contract",
              "contract_address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
              "type": "erc721",
              "token_id": "6473",
              "mint_to_address": "0xc155f9bd6b71e9f71d0236b689ad7c2c5d16febf",
              "metadata_uri": "ipfs://QmTz7dGHvXghNuh3V64QBwHPXva4chpMR7frpfxCaxvhd4",
              "quantity": "1",
              "metadata_frozen": true,
              "mint_date": "2021-08-23T17:25:03.501703"
            }
          ]
        }
      },
      "src__service__minting__entities__IpfsMetadataUploadRequest": {
        "title": "IpfsMetadataUploadRequest",
        "required": [
          "name",
          "description",
          "file_url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 400,
            "minLength": 1,
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Description of the NFT."
          },
          "file_url": {
            "title": "File Url",
            "minLength": 1,
            "type": "string",
            "description": "URL of the file that you wish to link with the metadata and turn into an NFT."
          },
          "external_url": {
            "title": "External Url",
            "minLength": 1,
            "type": "string",
            "description": "URL that will appear below the NFT on some of the NFT marketplaces such as OpenSea."
          },
          "animation_url": {
            "title": "Animation Url",
            "minLength": 1,
            "type": "string",
            "description": "URL to a multimedia attachment with all filetypes supported. If you want to make sure the file is supported by OpenSea, then see their [docs](https://docs.opensea.io/docs/metadata-standards#metadata-structure). When using ```animation_url```, set the ```file_url``` as the multimedia preview which will be displayed on the NFT marketplaces e.g. if your ```animation_url``` is a video then set ```file_url``` as the preview image for it."
          },
          "custom_fields": {
            "title": "Custom Fields",
            "type": "object",
            "description": "A dictionary which allows you to extend the metadata schema with your own arbitrary fields. You can pass anything here as long as it is follows “key”: “value” format inside a dictionary. All of the fields will be flattened and added to the top-level namespace e.g. like ```name```, ```description```, etc. Read more about [Metadata Schema](https://nftschool.dev/reference/metadata-schemas/#intro-to-json-schemas). Example:\n\n                    {\n                        \"youtube_url\": \"https://www.youtube.com/watch?v=M2mBg7xHmY8&t=1s\",\n                        \"background_color\": \"ffffff\",\n                        \"random_key\": \"random_value\"\n                    }\n                    "
          },
          "attributes": {
            "title": "Attributes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataAttribute"
            },
            "description": "Optional list of NFT attributes. See [OpenSea docs](https://docs.opensea.io/docs/metadata-standards#attributes) for more information. Example:\n\n                    \"attributes\": [\n                        {\n                          \"trait_type\": \"Background\", \n                          \"value\": \"Clean\"\n                        }, \n                        {\n                          \"trait_type\": \"Type\", \n                          \"value\": \"Rare\"\n                        }, \n                        {\n                          \"trait_type\": \"Packaging\", \n                          \"value\": \"Clean\"\n                        },\n                        {\n                          \"trait_type\": \"Personality\", \n                          \"value\": \"OG\"\n                        }\n                    ]\n                    "
          }
        },
        "example": {
          "name": "My Art",
          "description": "This is my custom art piece",
          "file_url": "https://ipfs.io/ipfs/QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ"
        }
      },
      "src__service__minting__entities__IpfsMetadataUploadResponse": {
        "title": "IpfsMetadataUploadResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "type": "string",
            "description": "Uploaded metadata URI (also known as token URI) which you can use in [Customizable minting](https://docs.nftport.xyz/docs/nftport/b3A6MjE2NjM5MDI-customizable-minting)."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "URL of the file that is linked with the metadata and can be turned into an NFT."
          },
          "external_url": {
            "title": "External Url",
            "type": "string",
            "description": "URL that will appear below the NFT on some of the NFT marketplaces such as OpenSea."
          },
          "animation_url": {
            "title": "Animation Url",
            "type": "string",
            "description": "URL to a multimedia attachment."
          },
          "custom_fields": {
            "title": "Custom Fields",
            "type": "object",
            "description": "Custom fields added to the metadata."
          },
          "attributes": {
            "title": "Attributes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataAttribute"
            },
            "description": "NFT attributes."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "metadata_uri": "ipfs://QmTz7dGHvXghNuh3V64QBwHPXva4chpMR7frpfxCaxvhd4",
          "name": "My Art",
          "description": "This is my custom art piece",
          "file_url": "https://ipfs.io/ipfs/QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ"
        }
      },
      "src__service__minting__entities__UserMintedNftResponse": {
        "title": "UserMintedNftResponse",
        "required": [
          "chain",
          "transaction_hash",
          "contract_name",
          "type",
          "mint_to_address",
          "quantity",
          "metadata_frozen",
          "mint_date"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "rinkeby"
            ],
            "type": "string",
            "description": "Blockchain the NFT was minted on."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after minting."
          },
          "contract_name": {
            "title": "Contract Name",
            "type": "string",
            "description": "Contract name of the minted NFT."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract address of the minted NFT."
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Contract type (erc721 or erc1155)."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFT was sent."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "type": "string",
            "description": "IPFS URI containing the metadata linked with the minted NFT."
          },
          "quantity": {
            "title": "Quantity",
            "type": "string",
            "description": "Quantity of minted tokens. For erc721 contract type it's always 1."
          },
          "metadata_frozen": {
            "title": "Metadata Frozen",
            "type": "boolean",
            "description": "If ```true``` than the metadata can not be updated."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          }
        },
        "example": {
          "chain": "polygon",
          "transaction_hash": "0x124141or0f10140112381381dd",
          "contract_name": "My NFTPort contract",
          "contract_address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
          "type": "erc721",
          "token_id": "6473",
          "mint_to_address": "0xc155f9bd6b71e9f71d0236b689ad7c2c5d16febf",
          "metadata_uri": "ipfs://QmTz7dGHvXghNuh3V64QBwHPXva4chpMR7frpfxCaxvhd4",
          "quantity": "1",
          "metadata_frozen": true,
          "mint_date": "2021-08-23T17:25:03.501703"
        }
      },
      "src__service__nfts__deprecated__entities__NftDetails": {
        "title": "NftDetails",
        "required": [
          "contract_address",
          "token_id"
        ],
        "type": "object",
        "properties": {
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "token_uri": {
            "title": "Token Uri",
            "type": "string",
            "description": "Token URI (For ERC-721 it is the token_uri() function and ERC-1155 it is the uri() function in the smart contract)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "NFT metadata downloaded and parsed from the contract token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "asset_metadata": {
            "title": "Asset Metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/NftAssetMetadata"
              }
            ],
            "description": "Extra information of the file inside the NFT."
          },
          "image_url": {
            "title": "Image Url",
            "type": "string",
            "description": "Original Image URL."
          },
          "cached_image_url": {
            "title": "Cached Image Url",
            "type": "string",
            "description": "Cached image in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted."
          }
        },
        "example": {
          "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "token_id": "100030071",
          "token_uri": "https://api.niftygateway.com/beeple/100030071/",
          "metadata": {
            "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
            "background_color": "ffffff",
            "external_url": "https://niftygateway.com/#/",
            "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
            "name": "POLITICS IS BULLSHIT #71/100",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
          },
          "asset_metadata": {
            "height": 512,
            "width": 512,
            "file_size": 310751
          },
          "image_url": "https://lh3.googleusercontent.com/79JB1V9gSMv83iMs-Db4qdpPVdpKiyt_sjGLgs575wLEgWjSRLCzMQMoxaealYz7AVCKY_mzSy6GlOYdGt_7aaCZfg",
          "cached_image_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
          "mint_date": "2020-10-29T15:03:54.838612"
        }
      },
      "src__service__nfts__deprecated__entities__NftDetailsResponse": {
        "title": "NftDetailsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nft": {
            "$ref": "#/components/schemas/src__service__nfts__deprecated__entities__NftDetails"
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
              "token_id": "100030071",
              "token_uri": "https://api.niftygateway.com/beeple/100030071/",
              "metadata": {
                "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
                "background_color": "ffffff",
                "external_url": "https://niftygateway.com/#/",
                "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
                "name": "POLITICS IS BULLSHIT #71/100",
                "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
              },
              "asset_metadata": {
                "height": 512,
                "width": 512,
                "file_size": 310751
              },
              "image_url": "https://lh3.googleusercontent.com/79JB1V9gSMv83iMs-Db4qdpPVdpKiyt_sjGLgs575wLEgWjSRLCzMQMoxaealYz7AVCKY_mzSy6GlOYdGt_7aaCZfg",
              "cached_image_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
              "mint_date": "2020-10-29T15:03:54.838612"
            }
          ]
        }
      },
      "src__service__nfts__entities__Nft": {
        "title": "Nft",
        "required": [
          "chain",
          "contract_address",
          "token_id"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "ethereum",
              "polygon"
            ],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "contract": {
            "title": "Contract",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractInfoResponse"
              }
            ],
            "description": "Information of the NFT’s contract."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "Original file (image, video, etc) URL of the NFT."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          },
          "file_information": {
            "title": "File Information",
            "allOf": [
              {
                "$ref": "#/components/schemas/NftAssetMetadata"
              }
            ],
            "description": "Extra information of the NFT’s file."
          },
          "updated_date": {
            "title": "Updated Date",
            "type": "string",
            "description": "Date when the NFT’s metadata was last downloaded or updated/refreshed."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "token_id": "100030071",
          "contract": {
            "name": "Decentraland LAND",
            "symbol": "LAND",
            "type": "ERC721"
          },
          "metadata": {
            "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
            "background_color": "ffffff",
            "external_url": "https://niftygateway.com/#/",
            "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
            "name": "POLITICS IS BULLSHIT #71/100",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
          },
          "metadata_url": "https://api.niftygateway.com/beeple/100030071",
          "file_url": "https://lh3.googleusercontent.com/79JB1V9gSMv83iMs-Db4qdpPVdpKiyt_sjGLgs575wLEgWjSRLCzMQMoxaealYz7AVCKY_mzSy6GlOYdGt_7aaCZfg",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
          "mint_date": "2020-10-29T15:03:54.838612",
          "file_information": {
            "height": 512,
            "width": 512,
            "file_size": 310751
          },
          "updated_date": "2021-10-19T15:03:54.838612"
        }
      },
      "src__service__nfts__entities__NftDetails": {
        "title": "NftDetails",
        "required": [
          "chain",
          "contract_address",
          "token_id"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "ethereum",
              "polygon"
            ],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "file_information": {
            "title": "File Information",
            "allOf": [
              {
                "$ref": "#/components/schemas/NftAssetMetadata"
              }
            ],
            "description": "Extra information of the NFT’s file."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "Original file (image, video, etc) URL of the NFT."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          },
          "updated_date": {
            "title": "Updated Date",
            "type": "string",
            "description": "Date when the NFT’s metadata was last downloaded or updated/refreshed."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "token_id": "100030071",
          "metadata_url": "https://api.niftygateway.com/beeple/100030071/",
          "metadata": {
            "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
            "background_color": "ffffff",
            "external_url": "https://niftygateway.com/#/",
            "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
            "name": "POLITICS IS BULLSHIT #71/100",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
          },
          "file_information": {
            "height": 512,
            "width": 512,
            "file_size": 310751
          },
          "file_url": "https://lh3.googleusercontent.com/79JB1V9gSMv83iMs-Db4qdpPVdpKiyt_sjGLgs575wLEgWjSRLCzMQMoxaealYz7AVCKY_mzSy6GlOYdGt_7aaCZfg",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
          "mint_date": "2020-10-29T15:03:54.838612",
          "updated_date": "2021-10-19T15:03:54.838612"
        }
      },
      "src__service__nfts__entities__NftDetailsResponse": {
        "title": "NftDetailsResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__nfts__entities__NftDetails"
              }
            ],
            "description": "Details of the NFT."
          },
          "contract": {
            "title": "Contract",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractInfoResponse"
              }
            ],
            "description": "Information of the NFT’s contract."
          },
          "status": {
            "title": "Status",
            "enum": [
              "ADDED",
              "PROCESSING",
              "PENDING",
              "REFRESHED_RECENTLY"
            ],
            "type": "string",
            "description": "Status of the contract tokens in the metadata refresh queue."
          },
          "status_message": {
            "title": "Status Message",
            "type": "string",
            "description": "Detailed description of the ```status```."
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "nft": {
            "chain": "ethereum",
            "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
            "token_id": "100030071",
            "metadata_url": "https://api.niftygateway.com/beeple/100030071/",
            "metadata": {
              "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
              "background_color": "ffffff",
              "external_url": "https://niftygateway.com/#/",
              "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
              "name": "POLITICS IS BULLSHIT #71/100",
              "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
            },
            "file_information": {
              "height": 512,
              "width": 512,
              "file_size": 310751
            },
            "file_url": "https://lh3.googleusercontent.com/79JB1V9gSMv83iMs-Db4qdpPVdpKiyt_sjGLgs575wLEgWjSRLCzMQMoxaealYz7AVCKY_mzSy6GlOYdGt_7aaCZfg",
            "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
            "mint_date": "2020-10-29T15:03:54.838612",
            "updated_date": "2021-10-19T15:03:54.838612"
          },
          "contract": {
            "name": "Decentraland LAND",
            "symbol": "LAND",
            "type": "ERC721"
          }
        }
      },
      "src__service__search__deprecated__entities__SearchResult": {
        "title": "SearchResult",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK"
          },
          "images": {
            "title": "Images",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/src__service__search__deprecated__entities__SearchResultImage"
            }
          },
          "reason": {
            "title": "Reason",
            "type": "string"
          }
        }
      },
      "src__service__search__deprecated__entities__SearchResultImage": {
        "title": "SearchResultImage",
        "required": [
          "chain",
          "contract_address",
          "token_id"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NftsRequestSupportedChain"
              }
            ],
            "description": "The blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "image_url": {
            "title": "Image Url",
            "type": "string",
            "description": "Cached image in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "external_url": {
            "title": "External Url",
            "type": "string",
            "description": "External url for the NFT where it originated from."
          },
          "raw_metadata": {
            "title": "Raw Metadata",
            "type": "object",
            "description": "NFT metadata downloaded and parsed from the contract token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          }
        }
      },
      "src__service__search__deprecated__search_url_request__SearchUrlRequest": {
        "title": "SearchUrlRequest",
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Image URL. Supports .JPG, .JPEG, .PNG, .WebP file formats."
          }
        },
        "example": {
          "url": "https://supermariorun.com/assets/img/stage/obj_mode1.png"
        }
      },
      "src__service__search__entities__SearchResult": {
        "title": "SearchResult",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/src__service__search__entities__SearchResultImage"
            },
            "description": "nfts"
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "chain": "ethereum",
              "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
              "token_id": "100030071",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
              "metadata": {
                "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
                "background_color": "ffffff",
                "external_url": "https://niftygateway.com/#/",
                "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
                "name": "POLITICS IS BULLSHIT #71/100",
                "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
              }
            }
          ]
        }
      },
      "src__service__search__entities__SearchResultImage": {
        "title": "SearchResultImage",
        "required": [
          "chain",
          "contract_address",
          "token_id"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "ethereum",
              "polygon"
            ],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "token_id": "100030071",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
          "metadata": {
            "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
            "background_color": "ffffff",
            "external_url": "https://niftygateway.com/#/",
            "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
            "name": "POLITICS IS BULLSHIT #71/100",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
          }
        }
      },
      "src__service__search__search_url_request__SearchUrlRequest": {
        "title": "SearchUrlRequest",
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Image URL. Supports .JPG, .JPEG, .PNG, .WebP file formats."
          },
          "page_number": {
            "title": "Page Number",
            "minimum": 1,
            "type": "integer",
            "description": "The page number of the results to return. The first page is 1.",
            "default": 1
          },
          "page_size": {
            "title": "Page Size",
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "default": 50
          }
        },
        "example": {
          "url": "https://supermariorun.com/assets/img/stage/obj_mode1.png",
          "page_number": 1,
          "page_size": 50
        }
      },
      "src__service__text_search__deprecated__entities__TextSearchNft": {
        "title": "TextSearchNft",
        "required": [
          "chain",
          "contract_address",
          "token_id",
          "image_url",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "ethereum"
            ],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "image_url": {
            "title": "Image Url",
            "type": "string",
            "description": "Cached image in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT in the metadata."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT in the metadata."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "token_id": "100030071",
          "image_url": "Image url value",
          "name": "Name field value in NFT metadata",
          "description": "Description field value in NFT metadata",
          "mint_date": "2020-10-29T15:03:54.838612"
        }
      },
      "src__service__text_search__deprecated__entities__TextSearchResponse": {
        "title": "TextSearchResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "search_results": {
            "title": "Search Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/src__service__text_search__deprecated__entities__TextSearchNft"
            }
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "search_results": [
            {
              "chain": "ethereum",
              "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
              "token_id": "100030071",
              "image_url": "Image url value",
              "name": "Name field value in NFT metadata",
              "description": "Description field value in NFT metadata",
              "mint_date": "2020-10-29T15:03:54.838612"
            }
          ]
        }
      },
      "src__service__text_search__entities__TextSearchNft": {
        "title": "TextSearchNft",
        "required": [
          "chain",
          "contract_address",
          "token_id",
          "cached_file_url",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": [
              "polygon",
              "ethereum"
            ],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT in the metadata."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT in the metadata."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "token_id": "100030071",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
          "name": "Name field value in NFT metadata",
          "description": "Description field value in NFT metadata",
          "mint_date": "2020-10-29T15:03:54.838612"
        }
      },
      "src__service__text_search__entities__TextSearchResponse": {
        "title": "TextSearchResponse",
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "search_results": {
            "title": "Search Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/src__service__text_search__entities__TextSearchNft"
            }
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "search_results": [
            {
              "chain": "ethereum",
              "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
              "token_id": "100030071",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
              "name": "Name field value in NFT metadata",
              "description": "Description field value in NFT metadata",
              "mint_date": "2020-10-29T15:03:54.838612"
            }
          ]
        }
      },
      "src__service__transactions__entities__Nft": {
        "title": "Nft",
        "type": "object",
        "properties": {
          "contract_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractType"
              }
            ],
            "description": "Contract type."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique `uint256` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "creators": {
            "title": "Creators",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Creators"
            },
            "description": "Details of the creators of the NFT."
          },
          "royalties": {
            "title": "Royalties",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Royalties"
            },
            "description": "Details of the royalty payments."
          },
          "signatures": {
            "title": "Signatures",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of wallet approval signatures for the transaction from every creator of the NFT (for `contract_type`- `ERC721_lazy` and `ERC1155_lazy`)."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total supply of the minted NFTs."
          }
        },
        "example": {
          "contract_type": "ERC1155_lazy",
          "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
          "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
          "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
          "creators": [
            {
              "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
              "creator_share": "10000"
            }
          ],
          "royalties": [
            {
              "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
              "royalty_share": "1000"
            }
          ],
          "signatures": [
            "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
          ],
          "total": 5000
        }
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  }
}